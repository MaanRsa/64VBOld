/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.maan.document;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import com.maan.common.Runner;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.maan.common.AbstractMotorBaseDispatchAction;
import com.maan.common.LogManager;
import com.maan.common.Validation;
import com.maan.common.exception.MotorBaseException;

/**
 * MyEclipse Struts Creation date: 09-14-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class SearchDispatchAction extends AbstractMotorBaseDispatchAction {
	/*
	 * Generated Methods
	 */	
	private static final String EMPTY = "";	
	
	public ActionForward search(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws MotorBaseException {

		//LogManager.push("Inside search");
		ActionForward forward = null;
		forward = mapping.findForward("searchHome");
		return forward;
	}

	public ActionForward searchPolicy(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws MotorBaseException {

		ActionForward forward = null;
		String SPAGE = EMPTY;
		SPAGE = "spage";
		final Validation valid = new Validation();		
		final HttpSession session = request.getSession(false);
		final String mfrId = valid.isNull((String)session.getAttribute("mfrid"));
		
		final SearchDaoImpl sdi = new SearchDaoImpl();
		final StringBuffer errors = new StringBuffer(500);
		//LogManager.push("Inside search Policy");
		final String searchOption = valid.isNull(request.getParameter("searchOption"));
		final String searchValue = valid.isNull(request.getParameter("searchValue"));
		String[][] policyDetail = new String[0][0];
		String policyCount = EMPTY;
		int spage=1;
		if(request.getParameter(SPAGE)!=null&&!request.getParameter(SPAGE).equalsIgnoreCase(EMPTY))
		{
			spage=request.getParameter(SPAGE)==null?1:Integer.parseInt(request.getParameter(SPAGE));
		}
		final String start = valid.isNull(request.getParameter("start"),"0");
		String startNumber = valid.isNull(request.getParameter("startNumber"),((spage-1)*10+1+EMPTY));
		if(startNumber == null || EMPTY.equals(startNumber.trim()))
		{
			startNumber = (spage-1)*10+1+EMPTY;
		}
		String endNumber = valid.isNull(request.getParameter("endNumber"));
		if(endNumber == null || EMPTY.equals(endNumber.trim()))
		{
			endNumber = Integer.parseInt(startNumber)+9+EMPTY;
		}

		if (EMPTY.equals(searchOption)) {
			errors.append("Please select Search Option <br>");
		}
		if (EMPTY.equals(searchValue)) {
			errors.append("Please select Search Value <br>");
		}
		
		if (searchValue.length()<=7) {
			errors.append("Policy Number should be greater than seven <br>");
		}
		
		
		if (EMPTY.equals(errors) || errors.length()<=0) {
			LogManager.info("Inside no error");
			final String nrMasTable = sdi.getMasTable(mfrId,"101");
			LogManager.info("nrMasTable="+nrMasTable);
			
			final String nrRawMasTable = sdi.getRawMasTable(mfrId,"101");
			LogManager.info("nrRawMasTable="+nrRawMasTable);
			
			
			
			
			
			final String enMasTable = sdi.getMasTable(mfrId,"104");
			LogManager.info("enMasTable="+enMasTable);
			
			
			final String enRawMasTable = sdi.getRawMasTable(mfrId,"104");
			LogManager.info("enRasMasTable="+enRawMasTable);
			
			String[][] policyDetail1=sdi.getMotorPolDetail(mfrId, searchValue, nrMasTable, enMasTable, startNumber, endNumber);
			String[][] policyDetail2=sdi.getXgenPolDetail(mfrId, searchValue, nrMasTable, enMasTable, startNumber, endNumber);
			
			
			if(policyDetail1.length==0 && policyDetail2.length==0){
				
				LogManager.push("policyDetail1.length==0 || policyDetail2.length==0");
				
				ArrayList TempValues=sdi.getTemValues(mfrId, searchValue, nrRawMasTable, enRawMasTable);
				
				for(int x=0;x<TempValues.size();x++){
					SearchBean bean=(SearchBean)TempValues.get(x);
					String[] val=sdi.getValues(bean.getValidateStatus(),mfrId);
					bean.setValueArray(val);
				}
				request.setAttribute("TempValues", TempValues)	;	
				forward = mapping.findForward("policyView1");
				
			
			
			}else{
			
				if("1".equals(searchOption) && (policyDetail == null || policyDetail.length<=0))
				{
					errors.append("Please Enter Valid Policy number");
					forward = mapping.findForward("searchHome");
				}
				else if("2".equals(searchOption) && (policyDetail == null || policyDetail.length<=0))
				{
					errors.append("Please Enter Valid Xgen Policy number");
					forward = mapping.findForward("searchHome");
				}
				LogManager.push("    NOT      policyDetail1.length==0 || policyDetail2.length==0");
			
			if ("1".equals(searchOption)) {
				// Search 12 digit policy number wise
				policyCount = sdi.getMotorPolCount(mfrId, searchValue, nrMasTable, enMasTable);
				policyDetail=sdi.getMotorPolDetail(mfrId, searchValue, nrMasTable, enMasTable, startNumber, endNumber);
				LogManager.info("option 1 policyCount"+policyCount);
				LogManager.info("option 1 policy detail length"+policyDetail.length);
			
			} else if ("2".equals(searchOption)) {
				// Xgen Policy number search
				policyCount = sdi.getXgenPolCount(mfrId, searchValue, nrMasTable, enMasTable);
				policyDetail=sdi.getXgenPolDetail(mfrId, searchValue, nrMasTable, enMasTable, startNumber, endNumber);
				LogManager.info("option 2 policyCount"+policyCount);
				LogManager.info("option 2 policy detail length"+policyDetail.length);

			} 
			/*else if ("1".equals(searchOption)) {
				errors.append("Policy number length should be 12 digit");
			} else if ("2".equals(searchOption)) {
				errors.append("Xgen Policy number length should be 16 digit");
			}*/
			
			request.setAttribute("policyCount", policyCount);
			request.setAttribute("policyDetail", policyDetail);
			request.setAttribute("searchOption", searchOption);
			request.setAttribute("searchValue", searchValue);
			request.setAttribute("startNumber", startNumber);
			request.setAttribute("endNumber", endNumber);
			request.setAttribute("start", start);
			
			forward = mapping.findForward("policyView");
			}
			
		} else {
			forward = mapping.findForward("searchHome");
		}
		request.setAttribute("message", errors);
		LogManager.info("error msg" + errors);
		return forward;
	}
}