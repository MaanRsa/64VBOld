/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.maan.document;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.maan.common.AbstractMotorBaseDispatchAction;
import com.maan.common.LogManager;
import com.maan.common.SQLExecution;
import com.maan.common.Validation;
import com.maan.common.exception.MotorBaseException;


/**
 * MyEclipse Struts Creation date: 09-14-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class DocumentDispatchAction extends AbstractMotorBaseDispatchAction {
	/*
	 * Generated Methods
	 */
	private static final String EMPTY = "";
	private static final String COUNT="count";
	private static final String PROCEDURENAME = "ProcedureName";
	private static final String SELECT = "Select";
	private static final String PENDING = "pending";
	private static final String PARAM1 = "param1";
	
	public ActionForward document(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws MotorBaseException {

		//LogManager.push("Inside document");
		ActionForward forward;
		final Validation valid = new Validation();
		final DocumentDaoImpl ddiBean= new DocumentDaoImpl();
		final HttpSession session = request.getSession(false);
		final HashMap hsRequests = new HashMap();
		final String mfrId = valid.isNull((String)session.getAttribute("mfrid"));
		final String xgenPolicyNo = valid.isNull(request.getParameter("xgenPolicyNo"));
		final String endorsementNo = valid.isNull(request.getParameter("endorsementNo"));
		final String productId = valid.isNull(request.getParameter("productId"));
		final String productCode = valid.isNull(request.getParameter("productCode"));
		final String businessTypeId = ddiBean.getBusinessTypeId(xgenPolicyNo);
		final String[][] infoDBDetails = ddiBean.getFullInfoDetailDetails(xgenPolicyNo,mfrId,endorsementNo);
		final String[][] infoDetails = ddiBean.getDocumentTypeInfoDetails(productId);
		LogManager.push("infoDetails.length=="+infoDetails.length);
		LogManager.push("xgenPolicyNo=="+xgenPolicyNo);
		LogManager.push("endorsementNo=="+endorsementNo);
		LogManager.push("productCode=="+productCode);
		LogManager.push("productId=="+productId);
		hsRequests.put("product", productCode);
		hsRequests.put("productId", productId);
		hsRequests.put("endorsementNo", endorsementNo);
		hsRequests.put("policyNo", xgenPolicyNo);
		hsRequests.put("businessTypeId", businessTypeId);
		hsRequests.put("infoDBDetails", infoDBDetails);
		hsRequests.put("infoDetails", infoDetails);
		ddiBean.setXgenPolicyNo(xgenPolicyNo);
		ddiBean.setEndorsementNo(endorsementNo);
		ddiBean.setMfrId(mfrId);
		for(int id=0;id<infoDetails.length;id++)
		{
			//LogManager.push("infoDetails[id][0]==="+infoDetails[id][0]);
			//LogManager.push("businessTypeId==="+businessTypeId);
			final String[][] infoDetailDetails =  ddiBean.getDocumentTypeInfoDetailDetails(infoDetails[id][0],productId,businessTypeId);
			//LogManager.push("infoDetailDetails.length"+infoDetailDetails.length);
			hsRequests.put("infoDetailDetails"+infoDetails[id][0], infoDetailDetails);
			for(int idd=0;idd<infoDetailDetails.length;idd++)
			{
				if("Text".equalsIgnoreCase(infoDetailDetails[idd][3]) || "Date".equalsIgnoreCase(infoDetailDetails[idd][3]))
				{
					final String[][] Textvalues = ddiBean.getTextDiscValues(infoDetailDetails[idd][1]);
					hsRequests.put("Textvalues"+infoDetailDetails[idd][1], Textvalues);
				}
				else if("radio".equalsIgnoreCase(infoDetailDetails[idd][3]) || "checkbox".equalsIgnoreCase(infoDetailDetails[idd][3])  
						|| "listbox".equalsIgnoreCase(infoDetailDetails[idd][3]))
				{
					final String[][] infoValue = ddiBean.getInfoValue(infoDetailDetails[idd][1]);
					hsRequests.put("infoValue"+infoDetailDetails[idd][1], infoValue);
				}
			}
		}
		
		request.setAttribute("hsRequests", hsRequests);
		forward = mapping.findForward("documentEntry");
		return forward;
	}

	public ActionForward documentInsert(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws MotorBaseException {
		
		ActionForward forward=null;
		final Validation valid = new Validation();
		final HashMap hsProposalTrans = new HashMap();
		final HttpSession session = request.getSession(false);
		final String mfrId = valid.isNull((String)session.getAttribute("mfrid"));
		final String productId = valid.isNull(request.getParameter("productId"));
		final String xgenPolicyNo = valid.isNull(request.getParameter("xgenPolicyNo"));
		final String endorsementNo = valid.isNull(request.getParameter("endorsementNo"));
		String[][] amendArray = new String[0][0];
		final DocumentDaoImpl ddiBean= new DocumentDaoImpl();
		ddiBean.setMfrId(mfrId);
		ddiBean.setXgenPolicyNo(xgenPolicyNo);
		ddiBean.setEndorsementNo(endorsementNo);
		final String businessTypeId = ddiBean.getBusinessTypeId(xgenPolicyNo);
		ddiBean.setProductId(productId);
		ddiBean.setBussinessTypeId(businessTypeId);
		final String[][] infoDetails = ddiBean.getDocumentTypeInfoDetails(productId);
		StringBuffer docError = new StringBuffer();
		final HashMap hsProcedureIncre = new HashMap();
		final HashMap hsRequestValues = new HashMap();
		hsProcedureIncre.put(COUNT, "2");
		hsProcedureIncre.put(PROCEDURENAME, "spIncreDiscrepancyAmend");
		hsProcedureIncre.put(PARAM1, xgenPolicyNo);
		//amendArray = SQLExecution.selection(hsProcedureIncre);
		//hsProposalTrans.put("amendId", amendId);
		ddiBean.setAmendId(valid.isNull(amendArray[0][0]));
		String relValue=EMPTY;
		StringBuffer message = new StringBuffer();
		try{
			String[][] infoDetailDetails =  new String[0][0];
			String[][] infoValues = new String[0][0];
			final HashMap hsDocInfo = new HashMap();
			//Validation Module - Mathi - Jan-22-2010
			for(int i=0;i<infoDetails.length;i++)
			{
				infoDetailDetails = ddiBean.getDocumentTypeInfoDetailDetails(infoDetails[i][0],productId,businessTypeId);
				infoValues = new String[infoDetailDetails.length][2];
				
				for(int t=0;t<infoDetailDetails.length;t++)
				{
					final String ress = infoDetailDetails[t][2].replaceAll(" ",EMPTY).trim();
					infoValues[t][0] = infoDetailDetails[t][1];
					infoValues[t][1] = request.getParameter(ress) == null || SELECT.equalsIgnoreCase(request.getParameter(ress)) ? EMPTY:request.getParameter(ress);
					hsRequestValues.put(infoDetailDetails[t][2], infoValues[t][1]);
					if("No".equalsIgnoreCase(infoValues[t][1])||EMPTY.equals(infoValues[t][1]))
					{
						relValue="No";
					}
					else
					{
						relValue = "Yes";
					}
					hsDocInfo.put("docId"+infoDetailDetails[t][1],relValue);
				}
				ddiBean.setInfoValues(infoValues);
				ddiBean.setHsDocInfo(hsDocInfo);
				for(int j=0;j<infoDetailDetails.length;j++)
				{
					if("33".equals(infoDetailDetails[j][1]))
					{
						final String ress = infoDetailDetails[j][2].replaceAll(" ",EMPTY).trim();
						//String ssValue = request.getParameter(ress) == null || request.getParameter(ress).equalsIgnoreCase(SELECT) ? PENDING:request.getParameter(ress);
						final String ssValue = valid.isSelect(request.getParameter(ress),PENDING);
						//ssValue = ((ssValue.length()<=0)?PENDING:ssValue);
						request.setAttribute(ress, ssValue);
						String ssa = PENDING.equalsIgnoreCase(ssValue)?EMPTY:ssValue;
						ssa = ssa.trim().toUpperCase();
						hsProposalTrans.put("informationId", infoDetailDetails[j][1]);
						hsProposalTrans.put("informationValue", ssa);
						docError = ddiBean.validateInsureDetails(hsProposalTrans);
						if(docError != null && docError.length() > 0)
						{
								request.setAttribute("error", docError);
								request.setAttribute("hsRequestValues", hsRequestValues);
								String productCode = request.getParameter("productCode");
								productCode = productCode == null ? "" : productCode;
								final HashMap hsRequests = new HashMap();
								final String[][] infoDBDetails = ddiBean.getFullInfoDetailDetails(xgenPolicyNo,mfrId,endorsementNo);
								hsRequests.put("product", productCode);
								hsRequests.put("productId", productId);
								hsRequests.put("endorsementNo", endorsementNo);
								hsRequests.put("policyNo", xgenPolicyNo);
								hsRequests.put("businessTypeId", businessTypeId);
								hsRequests.put("infoDBDetails", infoDBDetails);
								hsRequests.put("infoDetails", infoDetails);
								ddiBean.setXgenPolicyNo(xgenPolicyNo);
								ddiBean.setEndorsementNo(endorsementNo);
								ddiBean.setMfrId(mfrId);
								for(int id=0;id<infoDetails.length;id++)
								{
									LogManager.push("infoDetails[id][0]==="+infoDetails[id][0]);
									LogManager.push("businessTypeId==="+businessTypeId);
									LogManager.push("infoDetailDetails.length"+infoDetailDetails.length);
									hsRequests.put("infoDetailDetails"+infoDetails[id][0], infoDetailDetails);
									for(int idd=0;idd<infoDetailDetails.length;idd++)
									{
										if("Text".equalsIgnoreCase(infoDetailDetails[idd][3]) || "Date".equalsIgnoreCase(infoDetailDetails[idd][3]))
										{
										final	String[][] Textvalues = ddiBean.getTextDiscValues(infoDetailDetails[idd][1]);
											hsRequests.put("Textvalues"+infoDetailDetails[idd][1], Textvalues);
										}
										else if("radio".equalsIgnoreCase(infoDetailDetails[idd][3]) || "checkbox".equalsIgnoreCase(infoDetailDetails[idd][3])  
												|| "listbox".equalsIgnoreCase(infoDetailDetails[idd][3]))
										{
										final	String[][] infoValue = ddiBean.getInfoValue(infoDetailDetails[idd][1]);
											hsRequests.put("infoValue"+infoDetailDetails[idd][1], infoValue);
										}
									}
								}
								
								request.setAttribute("hsRequests", hsRequests);
								forward = mapping.findForward("documentEntry");
								//return forward;
						}
					}
					
				}	
			}
		if(docError == null || !(docError.length() > 0))
		{
			for(int i=0;i<infoDetails.length;i++)
			{
			//ddiBean.setRelationIds(infoDetails[i][0]);
			for(int j=0;j<infoDetailDetails.length;j++)
			{
				final String ress = infoDetailDetails[j][2].replaceAll(" ",EMPTY).trim();
				//String ssValue = request.getParameter(ress) == null || SELECT.equalsIgnoreCase(request.getParameter(ress)) ? PENDING:request.getParameter(ress);
				final String ssValue = valid.isSelect(request.getParameter(ress),PENDING);
				//ssValue = ((ssValue.length()<=0)?PENDING:ssValue);
				request.setAttribute(ress, ssValue);
				String ssa = PENDING.equalsIgnoreCase(ssValue)?EMPTY:ssValue;
				ssa = ssa.trim().toUpperCase();
				hsProposalTrans.put("informationId", infoDetailDetails[j][1]);
				hsProposalTrans.put("informationValue", ssa);
				//hsProposalTrans.put(status, hsProposalTrans.get(statusDiscrepancy));
				//LogManager.push("hsProposalTrans.get(status)"+(String)hsProposalTrans.get(status));
				hsProposalTrans.put("informationName", ress);
				hsProposalTrans.put("informationType",infoDetailDetails[j][3]);
				hsProposalTrans.put("informationMandat",infoDetailDetails[j][4]);
				//hsProposalTrans.put("hsUserLevel", sessionULValue);
				// Mandatory Discrepancy Check Block- 15-Nov-2009
				//Document Details Insertion block
				message = new StringBuffer(ddiBean.manipulateInformation(hsProposalTrans));
			}
			}
		/*final HashMap hsGetProcedure = new HashMap();
		String user2[][] = new String[0][0];
		hsGetProcedure.put(count, "2");
		hsGetProcedure.put(procedureNameStr, "spGetLenYYDisc");
		hsGetProcedure.put(param1, hsProposalTrans.get(referenceNoStr));
		user2 = SQLExecution.selection(hsGetProcedure);
		String sameBranch = validClass.isNull(request.getParameter(sameBranchSt));
			
		LogManager.push("Before condition");
		if(user2 == null || user2.length==0 || user2[0][0]==null)
		{
				LogManager.push("Inside condition");
				LogManager.push("before update status"+hsProposalTrans.get(status));
				hsProposalTrans.put("remarks", EMPTY);
				ddiBean.manipulateCPOValue(hsProposalTrans);
			}
		LogManager.push("end");*/
			forward = mapping.findForward("searchPage");
			request.setAttribute("message", message);
			}
		}
		catch(Exception e){
			LogManager.debug(e); //e.printStackTrace();
		}		
		return forward;
	}
}