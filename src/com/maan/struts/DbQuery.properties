# FILE UPLOAD QUERIES

maan.db.receipt.details=SELECT RECEIPT_SL_NO,AMOUNT,CHEQUE_NO, FROM RECEIPT_MASTER WHERE RECEIPT_SL_NO=?

maan.db.upload.inscompany.status=SELECT COUNT(*) FROM INSURANCE_COMPANY_MASTER WHERE INS_COMPANY_CODE=? AND STATUS='Y'

##SEARCH###########
maan.db.search.details=SELECT CHEQUE_NO,AMOUNT,REASON,RECEIPT_SL_NO FROM RECEIPT_MASTER WHERE BANK_NO IS NOT NULL AND BANK_CODE IN(SELECT BANK_ACCOUNT_CODE FROM BANK_ACCOUNT_CODE WHERE BANK_ID=? AND STATUS='Y') AND CHEQUE_NO LIKE ? AND AMOUNT LIKE ?
		
maan.db.search.process.bankquery2=SELECT TABLE_NAME,CHEQUE_STATUS,REASON,CHEQUE_NO,CHEQUE_AMT,BANK_NAME,RECEIPT_NO FROM BANK_MASTER WHERE BANK_ID=? AND STATUS='Y'

######################################
maan.db.upload.transaction.checked=UPDATE TRANSACTION_DETAILS SET STATUS='Y' WHERE TRANSACTION_NO IN (?)

maan.db.upload.transaction.unchecked=UPDATE TRANSACTION_DETAILS SET STATUS='' WHERE TRANSACTION_NO IN (?)

maan.db.upload.transaction.all=UPDATE TRANSACTION_DETAILS SET STATUS=''

maan.db.upload.selected.transaction=SELECT TRANSACTION_NO FROM TRANSACTION_DETAILS WHERE STATUS='Y'

maan.db.get.upload.filetype=SELECT FILE_TYPE FROM TRANSACTION_DETAILS WHERE TRANSACTION_NO = ?

maan.db.get.transaction.details=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY') AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM RECEIPT_MASTER R1 WHERE R1.BANK_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND R1.CHEQUE_NO IS NOT NULL AND R1.BANK_NO!=-88888) AS MATCHED,(SELECT COUNT(*) FROM RECEIPT_MASTER R2 WHERE R2.BANK_NO IS NULL AND R2.BATCHID=T.TRANSACTION_NO AND R2.CHEQUE_NO IS NOT NULL) AS PENDING,TOTAL_RECORDS AS PROCESSED,(SELECT COUNT(*) FROM RECEIPT_MASTER R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM RECEIPT_MASTER WHERE BATCHID=T.TRANSACTION_NO AND TRANS_SOURCE='PYMT') AS PAYMENT,(SELECT COUNT(*) FROM DUP_RECEIPT_MASTER WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM RECEIPT_MASTER R1 WHERE BANK_NO=-88888 AND R1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='R' AND TRANSACTION_NO = ?

maan.db.update.transaction.details=UPDATE TRANSACTION_DETAILS SET PROCESSED='Y',PROCESSED_TIME=SYSDATE WHERE TRANSACTION_NO = ?

maan.db.get.all.bankids=SELECT UNIQUE BANK_ID FROM BANK_MASTER WHERE STATUS='Y'

maan.db.upload2.process.bankquery=SELECT TABLE_NAME,CHEQUE_NO,CHEQUE_AMT,CHEQUE_STATUS FROM BANK_MASTER WHERE BANK_ID=? AND STATUS='Y'

maan.db.upload.bank.list=SELECT BANK_ID,BANK_NAME FROM BANK_MASTER WHERE STATUS='Y' ORDER BY BANK_NAME ASC

maan.db.upload.branch.list=SELECT BRANCH_CODE, BRANCH_NAME FROM BRANCH_MASTER ORDER BY BRANCH_NAME

maan.db.upload.bank.list1=SELECT BANK_ID,BANK_NAME FROM BANK_MASTER WHERE STATUS='Y' ORDER BY BANK_NAME ASC

maan.db.upload.bank.details=SELECT TABLE_NAME FROM BANK_MASTER WHERE BANK_ID=?

maan.db.upload2.transaction.insert1=INSERT INTO TRANSACTION_DETAILS (TRANSACTION_NO,FILE_TYPE,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,PROCESSED,TRANSACTION_DATE,INVALID) VALUES (?,?,?,?,(SELECT COUNT(*) FROM CITI_BANK WHERE (CHEQUE_NO IS NOT NULL AND CHEQUE_NO<>' ') AND BATCHID=?),(SELECT COUNT(*) FROM CITI_BANK WHERE STATUS='CN' AND BATCHID=?),'N',SYSDATE,(SELECT COUNT(*) FROM DUP_CITI_BANK WHERE TRANSACTION_ID=? AND STATUS NOT IN ('D','E')))

maan.db.upload2.transaction.insert2=INSERT INTO TRANSACTION_DETAILS (TRANSACTION_NO,FILE_TYPE,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,PROCESSED,TRANSACTION_DATE,INVALID) VALUES (?,?,?,?,(SELECT COUNT(*) FROM HDFC_BANK WHERE (INSTRUMENT_NO IS NOT NULL AND INSTRUMENT_NO NOT LIKE ' ')   AND BATCHID=?),(SELECT COUNT(*) FROM HDFC_BANK WHERE STATUS='CN' AND BATCHID=?),'N',SYSDATE,(SELECT COUNT(*) FROM DUP_HDFC_BANK WHERE TRANSACTION_ID=? AND STATUS NOT IN ('D','E')))

maan.db.upload2.transaction.hsbc=INSERT INTO TRANSACTION_DETAILS (TRANSACTION_NO,FILE_TYPE,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,PROCESSED,TRANSACTION_DATE,INVALID) VALUES (?,?,?,?,(SELECT COUNT(*) FROM HSBC_BANK WHERE (INSTRUMENT_NO IS NOT NULL AND INSTRUMENT_NO NOT LIKE ' ')   AND BATCHID=?),(SELECT COUNT(*) FROM HSBC_BANK WHERE STATUS='CN' AND BATCHID=?),'N',SYSDATE,(SELECT COUNT(*) FROM DUP_HSBC_BANK WHERE TRANSACTION_ID=? AND STATUS NOT IN ('D','E')))

maan.db.upload2.transaction.insert3=INSERT INTO TRANSACTION_DETAILS (TRANSACTION_NO,FILE_TYPE,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,TRANSACTION_DATE,INVALID) VALUES (?,?,?,?,(SELECT COUNT(*) FROM RECEIPT_MASTER WHERE CHEQUE_NO IS NOT NULL AND BATCHID =?),(SELECT COUNT(*) FROM RECEIPT_MASTER WHERE CHEQUE_NO IS NULL AND BATCHID=?),SYSDATE,(SELECT COUNT(*) FROM DUP_RECEIPT_MASTER WHERE TRANSACTION_ID=? AND STATUS NOT IN ('D','E')))

maan.db.upload2.transaction.insert4=INSERT INTO TRANSACTION_DETAILS (TRANSACTION_NO,FILE_TYPE,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,PROCESSED,TRANSACTION_DATE,INVALID) VALUES (?,?,?,?,(SELECT COUNT(*) FROM SCB_BANK WHERE (CHEQUE_NO IS NOT NULL AND CHEQUE_NO<>' ') AND BATCHID=?),(SELECT COUNT(*) FROM SCB_BANK WHERE STATUS='CN' AND BATCHID=?),'N',SYSDATE,(SELECT COUNT(*) FROM DUP_SCB_BANK WHERE TRANSACTION_ID=? AND STATUS NOT IN ('D','E')))

maan.db.upload2.transaction.insert5=INSERT INTO TRANSACTION_DETAILS (TRANSACTION_NO,FILE_TYPE,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,PROCESSED,TRANSACTION_DATE,INVALID) VALUES (?,?,?,?,(SELECT COUNT(*) FROM AXIS_BANK WHERE (INST_NO IS NOT NULL AND INST_NO<>' ') AND BATCHID=?),(SELECT COUNT(*) FROM AXIS_BANK WHERE STATUS='CN' AND BATCHID=?),'N',SYSDATE,(SELECT COUNT(*) FROM DUP_AXIS_BANK WHERE TRANSACTION_ID=? AND STATUS NOT IN ('D','E')))

#################RECEIPT FILE UPLOAD########################

maan.db.upload.receipt.transaction.insert=INSERT INTO TRANSACTION_DETAILS (TRANSACTION_NO,FILE_TYPE,TOTAL_RECORDS,DUPLICATES,TRANSACTION_DATE) VALUES (?,?,?,?,SYSDATE)

maan.db.upload.receipt.update=UPDATE RECEIPT_MASTER SET STATUS='CN' WHERE  CHEQUE_NO IS NULL

maan.db.upload.dbcolumns=SELECT LOWER(EXCEL_HEADER_NAME) EXCEL_HEADER_NAME,DB_COLUMN_NAME FROM RECEIPT_UPLOAD_MAP_MASTER WHERE INS_COMPANY_CODE=? AND ACTIVE='Y'

maan.db.upload.duplicate.update2=UPDATE TEMP_RECEIPT_MASTER SET STATUS='Y' WHERE STATUS IS NULL

maan.db.upload.duplicate.update=UPDATE TEMP_RECEIPT_MASTER SET VALIDATE_STATUS='D' WHERE ROWID IN (SELECT A.ROWID FROM TEMP_RECEIPT_MASTER A,(SELECT CNT,R,RECEIPT_NO,BANK_CODE,AMOUNT,RECEIPT_BRANCH_CODE,TRANS_SOURCE,PAYMENT_TYPE FROM (SELECT COUNT(*) CNT,MIN(ROWID) AS R,RECEIPT_NO,BANK_CODE,AMOUNT,RECEIPT_BRANCH_CODE,TRANS_SOURCE,PAYMENT_TYPE FROM TEMP_RECEIPT_MASTER GROUP BY RECEIPT_NO,BANK_CODE,AMOUNT,RECEIPT_BRANCH_CODE,TRANS_SOURCE,PAYMENT_TYPE) WHERE CNT>1) B WHERE A.RECEIPT_NO=B.RECEIPT_NO AND A.ROWID!=B.R )

maan.db.upload.duplicate.update1=UPDATE TEMP_RECEIPT_MASTER SET VALIDATE_STATUS='E' WHERE VALIDATE_STATUS='N' AND RECEIPT_NO IN (SELECT A.RECEIPT_NO FROM RECEIPT_MASTER A,TEMP_RECEIPT_MASTER B WHERE A.RECEIPT_NO=B.RECEIPT_NO AND A.BANK_CODE=B.BANK_CODE AND A.AMOUNT=B.AMOUNT AND A.RECEIPT_BRANCH_CODE=B.RECEIPT_BRANCH_CODE AND A.TRANS_SOURCE=B.TRANS_SOURCE AND A.PAYMENT_TYPE=B.PAYMENT_TYPE AND B.VALIDATE_STATUS='N')

maan.db.upload.duplicate.updatepymt=UPDATE TEMP_RECEIPT_MASTER SET VALIDATE_STATUS\='P' WHERE (RECEIPT_BRANCH_CODE IS NULL OR TRANS_SOURCE\='PYMT') 

#maan.db.upload.master.insert=INSERT INTO RECEIPT_MASTER (RECEIPT_SL_NO,CHEQUE_NO,CHEQUE_DATE,RECEIPT_NO,RECEIPT_DATE,AMOUNT,BANK_NAME_AND_LOC,REASON,RECEIPT_ENTRY_ID,BANK_CODE,RECEIPT_AG_NAME,RECEIPT_AG_CODE,PRODUCT_CODE,RECEIPT_BRANCH_CODE,PARTICULARS,TRANS_SOURCE,CURRENT_BALANCE,DELAY_IN_DAYS,EXCHANGE_CURR_RATE,WTFOFF_1,WTFOFF_2,WTFOFF_3,DUE_DATE,PAYMENT_TYPE,CREDIT_CARD_NO,CREDIT_CARD_TYPE,CREDIT_CARD_BANK,CREDIT_CARD_EXPIRY,TRANSACTION_REFERENCE,CHANNEL,SUBCHANNEL,BATCH_ID,BANKREFERENCENUMBER,STATUS,R_DATE,REMARKS,) select RECEIPTSEQ.NEXTVAL,CHEQUE_NO,CHEQUE_DATE,RECEIPT_NO,RECEIPT_DATE,AMOUNT,BANK_NAME_AND_LOC,REASON,RECEIPT_ENTRY_ID,BANK_CODE,RECEIPT_AG_NAME,RECEIPT_AG_CODE,PRODUCT_CODE,RECEIPT_BRANCH_CODE,PARTICULARS,TRANS_SOURCE,CURRENT_BALANCE,DELAY_IN_DAYS,EXCHANGE_CURR_RATE,WTFOFF_1,WTFOFF_2,WTFOFF_3,DUE_DATE,PAYMENT_TYPE,CREDIT_CARD_NO,CREDIT_CARD_TYPE,CREDIT_CARD_BANK,CREDIT_CARD_EXPIRY,TRANSACTION_REFERENCE,CHANNEL,SUBCHANNEL,BATCH_ID,BANKREFERENCENUMBER,STATUS,R_DATE,REMARKS, from TEMP_RECEIPT_MASTER where STATUS = 'Y' AND  = ?

maan.db.upload.master.insert=INSERT INTO RECEIPT_MASTER (RECEIPT_SL_NO,CHEQUE_NO,CHEQUE_DATE,RECEIPT_NO,RECEIPT_DATE,AMOUNT,BANK_NAME_AND_LOC,REASON,RECEIPT_ENTRY_ID,BANK_CODE,RECEIPT_AG_NAME,RECEIPT_AG_CODE,PRODUCT_CODE,RECEIPT_BRANCH_CODE,PARTICULARS,TRANS_SOURCE,CURRENT_BALANCE,DELAY_IN_DAYS,EXCHANGE_CURR_RATE,WTFOFF_1,WTFOFF_2,WTFOFF_3,DUE_DATE,PAYMENT_TYPE,CREDIT_CARD_NO,CREDIT_CARD_TYPE,CREDIT_CARD_BANK,CREDIT_CARD_EXPIRY,TRANSACTION_REFERENCE,CHANNEL,SUBCHANNEL,BATCH_ID,BANKREFERENCENUMBER,STATUS,R_DATE,REMARKS) select RECEIPTSEQ.NEXTVAL,CHEQUE_NO,to_date(CHEQUE_DATE,'dd/mm/yyyy'),RECEIPT_NO,to_date(RECEIPT_DATE,'dd/mm/yyyy'),AMOUNT,BANK_NAME_AND_LOC,REASON,RECEIPT_ENTRY_ID,BANK_CODE,RECEIPT_AG_NAME,RECEIPT_AG_CODE,PRODUCT_CODE,RECEIPT_BRANCH_CODE,PARTICULARS,TRANS_SOURCE,CURRENT_BALANCE,DELAY_IN_DAYS,EXCHANGE_CURR_RATE,WTFOFF_1,WTFOFF_2,WTFOFF_3,to_date(DUE_DATE,'dd/mm/yyyy'),PAYMENT_TYPE,CREDIT_CARD_NO,CREDIT_CARD_TYPE,CREDIT_CARD_BANK,CREDIT_CARD_EXPIRY,TRANSACTION_REFERENCE,CHANNEL,SUBCHANNEL,BATCH_ID,BANKREFERENCENUMBER,STATUS,R_DATE,REMARKS from TEMP_RECEIPT_MASTER where STATUS = 'Y' AND  = ?
maan.db.upload.duplicates.insert=INSERT INTO DUP_RECEIPT_MASTER (CHEQUE_NO,CHEQUE_DATE,RECEIPT_NO,RECEIPT_DATE,AMOUNT,BANK_NAME_AND_LOC,REASON,RECEIPT_ENTRY_ID,BANK_CODE,RECEIPT_AG_NAME,RECEIPT_AG_CODE,PRODUCT_CODE,RECEIPT_BRANCH_CODE,PARTICULARS,TRANS_SOURCE,CURRENT_BALANCE,DELAY_IN_DAYS,EXCHANGE_CURR_RATE,WTFOFF_1,WTFOFF_2,WTFOFF_3,DUE_DATE,PAYMENT_TYPE,CREDIT_CARD_NO,CREDIT_CARD_TYPE,CREDIT_CARD_BANK,CREDIT_CARD_EXPIRY,TRANSACTION_REFERENCE,CHANNEL,SUBCHANNEL,BATCH_ID,BANKREFERENCENUMBER,STATUS,R_DATE,REMARKS,TRANSACTION_ID) select CHEQUE_NO,CHEQUE_DATE,RECEIPT_NO,RECEIPT_DATE,AMOUNT,BANK_NAME_AND_LOC,REASON,RECEIPT_ENTRY_ID,BANK_CODE,RECEIPT_AG_NAME,RECEIPT_AG_CODE,PRODUCT_CODE,RECEIPT_BRANCH_CODE,PARTICULARS,TRANS_SOURCE,CURRENT_BALANCE,DELAY_IN_DAYS,EXCHANGE_CURR_RATE,WTFOFF_1,WTFOFF_2,WTFOFF_3,DUE_DATE,PAYMENT_TYPE,CREDIT_CARD_NO,CREDIT_CARD_TYPE,CREDIT_CARD_BANK,CREDIT_CARD_EXPIRY,TRANSACTION_REFERENCE,CHANNEL,SUBCHANNEL,BATCH_ID,BANKREFERENCENUMBER,VALIDATE_STATUS,R_DATE,REMARKS,BATCHID from TEMP_RECEIPT_MASTER where VALIDATE_STATUS <>'Y' AND BATCHID \= ?
#maan.db.upload.duplicates.insert=INSERT INTO DUP_RECEIPT_MASTER (CHEQUE_NO,CHEQUE_DATE,RECEIPT_NO,RECEIPT_DATE,AMOUNT,BANK_NAME_AND_LOC,REASON,RECEIPT_ENTRY_ID,BANK_CODE,RECEIPT_AG_NAME,RECEIPT_AG_CODE,PRODUCT_CODE,RECEIPT_BRANCH_CODE,PARTICULARS,TRANS_SOURCE,CURRENT_BALANCE,DELAY_IN_DAYS,EXCHANGE_CURR_RATE,WTFOFF_1,WTFOFF_2,WTFOFF_3,DUE_DATE,PAYMENT_TYPE,CREDIT_CARD_NO,CREDIT_CARD_TYPE,CREDIT_CARD_BANK,CREDIT_CARD_EXPIRY,TRANSACTION_REFERENCE,CHANNEL,SUBCHANNEL,BATCH_ID,BANKREFERENCENUMBER,STATUS,R_DATE,REMARKS,TRANSACTION_ID) select CHEQUE_NO,CHEQUE_DATE,RECEIPT_NO,RECEIPT_DATE,AMOUNT,BANK_NAME_AND_LOC,REASON,RECEIPT_ENTRY_ID,BANK_CODE,RECEIPT_AG_NAME,RECEIPT_AG_CODE,PRODUCT_CODE,RECEIPT_BRANCH_CODE,PARTICULARS,TRANS_SOURCE,CURRENT_BALANCE,DELAY_IN_DAYS,EXCHANGE_CURR_RATE,WTFOFF_1,WTFOFF_2,WTFOFF_3,DUE_DATE,PAYMENT_TYPE,CREDIT_CARD_NO,CREDIT_CARD_TYPE,CREDIT_CARD_BANK,CREDIT_CARD_EXPIRY,TRANSACTION_REFERENCE,CHANNEL,SUBCHANNEL,BATCH_ID,BANKREFERENCENUMBER,VALIDATE_STATUS,R_DATE,REMARKS,BATCHID from TEMP_RECEIPT_MASTER where VALIDATE_STATUS <>'Y' AND TRANSACTION_ID \= ? 


maan.db.upload.master.delete=DELETE FROM TEMP_RECEIPT_MASTER WHERE BATCHID=?

maan.db.upload.transaction.details=SELECT COUNT(*) FROM RECEIPT_MASTER WHERE VALIDATE_STATUS='Y' AND BATCHID = ?

maan.db.upload.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM DUP_RECEIPT_MASTER WHERE STATUS IN ('E','D') AND TRANSACTION_ID = ?

maan.db.upload.transactionpaymentcount.details=SELECT COUNT(*) CUNT FROM DUP_RECEIPT_MASTER WHERE STATUS IN ('P') AND TRANSACTION_ID = ?

##################RECEIPT NOS UPLOAD#########################

maan.db.upload.receipt.master.delete=DELETE FROM TEMP_RECEIPT_NUMBERS

maan.db.upload.receipt.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM TEMP_RECEIPT_NUMBERS WHERE VALIDATE_STATUS IN ('E','D') AND BATCHID = ?

maan.db.upload.receipt.transaction.details=SELECT COUNT(*) FROM RECEIPT_NUMBERS WHERE VALIDATE_STATUS='Y' AND BATCHID = ?

maan.db.upload.receipt.master.insert=INSERT INTO RECEIPT_NUMBERS (RECEIPT_NO,TRANS_SOURCE,TRANSACTION_ID,UPLOAD_DATE,UPLOAD_TIME) SELECT RECEIPT_NO,TRANS_SOURCE,TRANSACTION_ID,UPLOAD_DATE,UPLOAD_TIME FROM TEMP_RECEIPT_NUMBERS where VALIDATE_STATUS \= 'Y' 

maan.db.upload.receipt.duplicate.update2=UPDATE TEMP_RECEIPT_NUMBERS SET VALIDATE_STATUS='Y' WHERE VALIDATE_STATUS IS NULL

maan.db.upload.receipt.duplicate.update=UPDATE TEMP_RECEIPT_NUMBERS SET VALIDATE_STATUS='D' WHERE ROWID IN (SELECT A.ROWID FROM TEMP_RECEIPT_NUMBERS A,(SELECT CNT,R,RECEIPT_NO,TRANS_SOURCE FROM (SELECT COUNT(*) CNT,MIN(ROWID) AS R,RECEIPT_NO,TRANS_SOURCE FROM TEMP_RECEIPT_NUMBERS GROUP BY RECEIPT_NO,TRANS_SOURCE) WHERE CNT>1) B WHERE A.RECEIPT_NO=B.RECEIPT_NO AND A.ROWID!=B.R)

maan.db.upload.receipt.duplicate.update1=UPDATE TEMP_RECEIPT_NUMBERS SET VALIDATE_STATUS='E' WHERE RECEIPT_NO IN (SELECT A.RECEIPT_NO FROM RECEIPT_NUMBERS A,TEMP_RECEIPT_NUMBERS B WHERE A.RECEIPT_NO=B.RECEIPT_NO AND A.TRANS_SOURCE=B.TRANS_SOURCE)

maan.db.upload.dbcolumns4=SELECT LOWER(EXCEL_HEADER_NAME) EXCEL_HEADER_NAME,DB_COLUMN_NAME FROM RECEIPT_NO_MAP WHERE ACTIVE='Y'

##################RECEIPT REVERSALS UPLOAD#########################

maan.db.upload.receiptreverse.master.delete=DELETE FROM TEMP_RECEIPT_REVERSAL

maan.db.upload.receiptreverse.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM TEMP_RECEIPT_REVERSAL WHERE VALIDATE_STATUS IN ('E','D') AND BATCHID = ?

maan.db.upload.receiptreverse.transaction.details=SELECT COUNT(*) FROM RECEIPT_REVERSAL WHERE VALIDATE_STATUS='Y' AND BATCHID = ?

maan.db.upload.receiptreverse.master.insert=INSERT INTO RECEIPT_REVERSAL (RECEIPT_NO,TRANSACTION_ID,UPLOAD_DATE,UPLOAD_TIME) SELECT RECEIPT_NO,TRANSACTION_ID,UPLOAD_DATE,UPLOAD_TIME FROM TEMP_RECEIPT_REVERSAL where VALIDATE_STATUS \= 'Y' 

maan.db.upload.receiptreverse.duplicate.update2=UPDATE TEMP_RECEIPT_NUMBERS SET VALIDATE_STATUS='Y' WHERE VALIDATE_STATUS IS NULL

maan.db.upload.receiptreverse.duplicate.update=UPDATE TEMP_RECEIPT_NUMBERS SET VALIDATE_STATUS='D' WHERE ROWID IN (SELECT A.ROWID FROM TEMP_RECEIPT_NUMBERS A,(SELECT CNT,R,RECEIPT_NO,TRANS_SOURCE FROM (SELECT COUNT(*) CNT,MIN(ROWID) AS R,RECEIPT_NO,TRANS_SOURCE FROM TEMP_RECEIPT_NUMBERS GROUP BY RECEIPT_NO,TRANS_SOURCE) WHERE CNT>1) B WHERE A.RECEIPT_NO=B.RECEIPT_NO AND A.ROWID!=B.R)

maan.db.upload.receiptreverse.duplicate.update1=UPDATE TEMP_RECEIPT_NUMBERS SET VALIDATE_STATUS='E' WHERE RECEIPT_NO IN (SELECT A.RECEIPT_NO FROM RECEIPT_NUMBERS A,TEMP_RECEIPT_NUMBERS B WHERE A.RECEIPT_NO=B.RECEIPT_NO AND A.TRANS_SOURCE=B.TRANS_SOURCE)

maan.db.upload.dbcolumns7=SELECT LOWER(EXCEL_HEADER_NAME) EXCEL_HEADER_NAME,DB_COLUMN_NAME FROM RECEIPT_NO_MAP WHERE ACTIVE='Y'

###############SCB BANK FILE UPLOAD(updateBankRecords)######################

maan.db.upload2.scb.update=UPDATE SCB_BANK SET STATUS='CN' WHERE CHEQUE_NO IS NULL OR CHEQUE_NO LIKE ' '

##################AXIS BANK FILE UPLOAD(Update Bank Records)#################

maan.db.upload2.axis.update=UPDATE AXIS_BANK SET STATUS='CN' WHERE INST_NO IS NULL OR INST_NO LIKE ' '

################CITI BANK FILE UPLOAD########################

maan.db.upload2.master.update=UPDATE CITI_BANK SET STATUS='CN' WHERE CHEQUE_NO IS NULL OR CHEQUE_NO LIKE ' '

maan.db.upload.dbcolumns2=SELECT LOWER(EXCEL_HEADER_NAME) EXCEL_HEADER_NAME,DB_COLUMN_NAME FROM CITI_BANK_MAP_MASTER WHERE ACTIVE='Y'

##duplicates and existing records check ##
maan.db.upload2.duplicate.update2=UPDATE TEMP_CITI_BANK SET STATUS\='Y' WHERE STATUS IS NULL 

maan.db.upload2.duplicate.update=UPDATE TEMP_CITI_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_CITI_BANK B WHERE  A.DEPSLIPNO = B.DEPSLIPNO AND A.CHEQUE_NO = B.CHEQUE_NO AND A.CHEQUE_AMT = B.CHEQUE_AMT AND A.DEPOSIT_DATE = B.DEPOSIT_DATE AND A.TYPE_CRDR = B.TYPE_CRDR AND A.CREDIT_DEBIT_DATE=B.CREDIT_DEBIT_DATE)
#UPDATE TEMP_CITI_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_CITI_BANK B WHERE  A.DEPSLIPNO = B.DEPSLIPNO AND A.CHEQUE_NO = B.CHEQUE_NO AND A.CHEQUE_AMT = B.CHEQUE_AMT AND A.DEPOSIT_DATE = B.DEPOSIT_DATE AND A.TYPE_CRDR = B.TYPE_CRDR)

maan.db.upload2.duplicate.update1=update temp_citi_bank tcb set VALIDATE_STATUS='E' where VALIDATE_STATUS = 'N' and (DEPSLIPNO,CHEQUE_AMT,CHEQUE_NO,to_date(tcb.DEPOSIT_DATE,'dd/mm/yyyy'),TYPE_CRDR,to_date(tcb.CREDIT_DEBIT_DATE,'dd/mm/yyyy'))=(select DEPSLIPNO,CHEQUE_AMT,CHEQUE_NO,trunc(DEPOSIT_DATE),TYPE_CRDR,trunc(CREDIT_DEBIT_DATE) from  citi_bank cb where tcb.DEPSLIPNO=cb.DEPSLIPNO and tcb.CHEQUE_AMT=cb.CHEQUE_AMT and tcb.CHEQUE_NO=cb.CHEQUE_NO and to_date(tcb.DEPOSIT_DATE,'dd/mm/yyyy')=trunc(cb.DEPOSIT_DATE)  and to_date(tcb.CREDIT_DEBIT_DATE,'dd/mm/yyyy')=trunc(cb.CREDIT_DEBIT_DATE) and rownum=1)
#UPDATE TEMP_CITI_BANK SET VALIDATE_STATUS='E' WHERE  VALIDATE_STATUS='N' AND DEPSLIPNO IN (SELECT A.DEPSLIPNO FROM CITI_BANK A,TEMP_CITI_BANK B WHERE  A.CHEQUE_NO=B.CHEQUE_NO AND A.DEPSLIPNO=B.DEPSLIPNO  AND A.CHEQUE_AMT=B.CHEQUE_AMT  AND B.VALIDATE_STATUS='N')  AND DEPOSIT_DATE IN (SELECT B.DEPOSIT_DATE FROM CITI_BANK A,TEMP_CITI_BANK B WHERE   A.CHEQUE_NO=B.CHEQUE_NO AND A.DEPSLIPNO=B.DEPSLIPNO  AND A.CHEQUE_AMT=B.CHEQUE_AMT AND B.VALIDATE_STATUS='N' ) AND CHEQUE_AMT IN (SELECT B.CHEQUE_AMT FROM CITI_BANK A,TEMP_CITI_BANK B WHERE  A.CHEQUE_NO=B.CHEQUE_NO AND A.DEPSLIPNO=B.DEPSLIPNO  AND A.CHEQUE_AMT=B.CHEQUE_AMT AND B.VALIDATE_STATUS='N' )

maan.db.upload2.duplicate.update3=UPDATE TEMP_CITI_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_CITI_BANK B WHERE  A.DEPSLIPNO = B.DEPSLIPNO AND A.CHEQUE_NO IS NULL AND  B.CHEQUE_NO IS NULL AND A.CHEQUE_AMT = B.CHEQUE_AMT AND A.DEPOSIT_DATE = B.DEPOSIT_DATE AND A.TYPE_CRDR = B.TYPE_CRDR AND A.CREDIT_DEBIT_DATE=B.CREDIT_DEBIT_DATE)

maan.db.upload2.duplicate.update4=update temp_citi_bank tcb set VALIDATE_STATUS='E' where VALIDATE_STATUS = 'N' and (DEPSLIPNO,CHEQUE_AMT,CHEQUE_NO,to_date(tcb.DEPOSIT_DATE,'dd/mm/yyyy'),TYPE_CRDR,to_date(tcb.CREDIT_DEBIT_DATE,'dd/mm/yyyy'))=(select DEPSLIPNO,CHEQUE_AMT,CHEQUE_NO,trunc(DEPOSIT_DATE),TYPE_CRDR,trunc(CREDIT_DEBIT_DATE) from  citi_bank cb where tcb.DEPSLIPNO=cb.DEPSLIPNO and tcb.CHEQUE_AMT=cb.CHEQUE_AMT and tcb.CHEQUE_NO is null and cb.CHEQUE_NO is null and to_date(tcb.DEPOSIT_DATE,'dd/mm/yyyy')=trunc(cb.DEPOSIT_DATE)  and to_date(tcb.CREDIT_DEBIT_DATE,'dd/mm/yyyy')=trunc(cb.CREDIT_DEBIT_DATE))
#UPDATE TEMP_CITI_BANK SET VALIDATE_STATUS='E' WHERE   VALIDATE_STATUS='N' AND DEPSLIPNO IN (SELECT A.DEPSLIPNO FROM CITI_BANK A,TEMP_CITI_BANK B WHERE  A.CHEQUE_NO IS NULL AND B.CHEQUE_NO IS NULL AND A.DEPSLIPNO=B.DEPSLIPNO  AND A.CHEQUE_AMT=B.CHEQUE_AMT AND B.VALIDATE_STATUS='N')  AND DEPOSIT_DATE IN (SELECT B.DEPOSIT_DATE FROM CITI_BANK A,TEMP_CITI_BANK B WHERE   A.CHEQUE_NO IS NULL AND B.CHEQUE_NO IS NULL AND A.DEPSLIPNO=B.DEPSLIPNO  AND A.CHEQUE_AMT=B.CHEQUE_AMT  AND B.VALIDATE_STATUS='N') AND CHEQUE_AMT IN (SELECT B.CHEQUE_AMT FROM CITI_BANK A,TEMP_CITI_BANK B WHERE  A.CHEQUE_NO IS NULL AND B.CHEQUE_NO IS NULL AND A.DEPSLIPNO=B.DEPSLIPNO  AND A.CHEQUE_AMT=B.CHEQUE_AMT AND B.VALIDATE_STATUS='N' )

##move to citi master ##

maan.db.upload2.master.insert=INSERT INTO CITI_BANK (BANK_NO,CLIENT_CODE,DEPOSIT_DATE,PRODUCT,CREDIT_DEBIT_DATE,LOCATION,CHEQUE_NO,CHEQUE_AMT,TYPE_CRDR,NARRATION,CBP_NO,DEPSLIPNO,CUSTOMERREF,DEPOSIT_AMT,DWE_BANK_CODE,CHECK_DATA,COVERNOTENO,BANK_NAME,PICK_POINT_NAME,PKUP_POINT_CODE,REMARKS,) SELECT CITIBANKSEQ.NEXTVAL,CLIENT_CODE,DEPOSIT_DATE,PRODUCT,CREDIT_DEBIT_DATE,LOCATION,CHEQUE_NO,CHEQUE_AMT,TYPE_CRDR,NARRATION,CBP_NO,DEPSLIPNO,CUSTOMERREF,DEPOSIT_AMT,DWE_BANK_CODE,CHECK_DATA,COVERNOTENO,BANK_NAME,PICK_POINT_NAME,PKUP_POINT_CODE,REMARKS,BATCHID FROM  TEMP_CITI_BANK T WHERE T.STATUS='Y' AND BATCHID = ?

maan.db.upload2.duplicates.insert=INSERT INTO DUP_CITI_BANK (CLIENT_CODE,DEPOSIT_DATE,PRODUCT,CREDIT_DEBIT_DATE,LOCATION,CHEQUE_NO,CHEQUE_AMT,TYPE_CRDR,NARRATION,CBP_NO,DEPSLIPNO,CUSTOMERREF,DEPOSIT_AMT,DWE_BANK_CODE,CHECK_DATA,COVERNOTENO,BANK_NAME,PICK_POINT_NAME,PKUP_POINT_CODE,REMARKS,TRANSACTION_ID,STATUS) SELECT CLIENT_CODE,DEPOSIT_DATE,PRODUCT,CREDIT_DEBIT_DATE,LOCATION,CHEQUE_NO,CHEQUE_AMT,TYPE_CRDR,NARRATION,CBP_NO,DEPSLIPNO,CUSTOMERREF,DEPOSIT_AMT,DWE_BANK_CODE,CHECK_DATA,COVERNOTENO,BANK_NAME,PICK_POINT_NAME,PKUP_POINT_CODE,REMARKS,BATCHID,VALIDATE_STATUS FROM  TEMP_CITI_BANK T WHERE T.VALIDATE_STATUS <>'Y'

############################SCB FILE UPLOAD############## 
########SCB Insertion#################

maan.db.upload4.duplicates.insert=INSERT INTO DUP_SCB_BANK (CUSTOMER_NAME,ENT_TYPE,CR_DR,ENT_AMOUNT,CREDIT_DEBIT_DT,PRODUCT,PICKUPLOC,PICKUP_POINT,PICKUPDT,DEPOSIT_NO,DEPOSIT_DATE,DEP_AMOUNT,PAY_ORDER_NO,CHEQUE_NO,CHEQUE_DT,DRAWEE_BANK,DRAWNON,CHQ_AMOUNT,DRAWER,REASON,ENRICHMENT_NO,ENRICHMENT_REMARK,TRANSACTION_ID,STATUS) SELECT CUSTOMER_NAME,ENT_TYPE,CR_DR,ENT_AMOUNT,CREDIT_DEBIT_DT,PRODUCT,PICKUPLOC,PICKUP_POINT,PICKUPDT,DEPOSIT_NO,DEPOSIT_DATE,DEP_AMOUNT,PAY_ORDER_NO,CHEQUE_NO,CHEQUE_DT,DRAWEE_BANK,DRAWNON,CHQ_AMOUNT,DRAWER,REASON,ENRICHMENT_NO,ENRICHMENT_REMARK,BATCHID,VALIDATE_STATUS FROM TEMP_SCB_BANK T WHERE  T.VALIDATE_STATUS <>'Y'
 
maan.db.upload.transaction4.details=SELECT COUNT(*) FROM SCB_BANK WHERE VALIDATE_STATUS='Y' AND BATCHID = ?
 
maan.db.upload4.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM DUP_SCB_BANK WHERE STATUS IN ('E','D') AND TRANSACTION_ID = ?
 
maan.db.upload4.master.delete=DELETE FROM TEMP_SCB_BANK
 
#########################AXIS FILE UPLOAD###############################

maan.db.upload5.duplicates.insert=INSERT INTO DUP_AXIS_BANK ( TYPE,CUS_CODE,LOCATION_NAME,DEPOSIT_DATE,CR_DATE,RTN_DATE,SLIP_NO,NOF_INS,SLIP_AMOUNT,INST_NO,INST_DATE,INSTRUMENT_AMOUNT,I_ADDITIONAL_INFO1,I_ADDITIONAL_INFO2,RTN_AMT,RETURN_REASON,DRN_BK,DRWN_BRNCH_NAME,TRANSACTION_ID,STATUS) SELECT TYPE,CUS_CODE,LOCATION_NAME,DEPOSIT_DATE,CR_DATE,RTN_DATE,SLIP_NO,NOF_INS,SLIP_AMOUNT,INST_NO,INST_DATE,INSTRUMENT_AMOUNT,I_ADDITIONAL_INFO1,I_ADDITIONAL_INFO2,RTN_AMT,RETURN_REASON,DRN_BK,DRWN_BRNCH_NAME,BATCHID,VALIDATE_STATUS FROM TEMP_AXIS_BANK T WHERE  T.VALIDATE_STATUS <>'Y'

maan.db.upload.transaction5.details=SELECT COUNT(*) FROM AXIS_BANK WHERE VALIDATE_STATUS='Y' AND BATCHID = ?

maan.db.upload5.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM DUP_AXIS_BANK WHERE STATUS IN ('E','D') AND TRANSACTION_ID = ?

maan.db.upload5.master.delete=DELETE FROM TEMP_AXIS_BANK

##########################################################################
##delete temp records ##

maan.db.upload2.master.delete=DELETE FROM TEMP_CITI_BANK 

maan.db.upload.transaction2.details=SELECT COUNT(*) FROM CITI_BANK WHERE VALIDATE_STATUS='Y' AND BATCHID = ?

maan.db.upload2.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM DUP_CITI_BANK WHERE STATUS IN ('E','D') AND TRANSACTION_ID = ?

## mapping records of citi and receipt master ##
#####################HDFC BANK FILE UPLOAD######################

maan.db.upload2.hdfc.update=UPDATE HDFC_BANK SET STATUS='CN' WHERE INSTRUMENT_NO IS NULL OR INSTRUMENT_NO LIKE ' '

maan.db.upload2.hsbc.update=UPDATE HSBC_BANK SET STATUS='CN' WHERE INSTRUMENT_NO IS NULL OR INSTRUMENT_NO LIKE ' '

maan.db.upload.dbcolumns3=SELECT LOWER(EXCEL_HEADER_NAME) EXCEL_HEADER_NAME,DB_COLUMN_NAME FROM HDFC_BANK_MAP_MASTER WHERE AND ACTIVE='Y'

maan.db.upload3.duplicate.update2=UPDATE TEMP_HDFC_BANK SET STATUS='Y' WHERE STATUS IS NULL

#maan.db.upload3.duplicate.update=UPDATE TEMP_HDFC_BANK SET VALIDATE_STATUS='D' WHERE ROWID IN (SELECT A.ROWID FROM TEMP_HDFC_BANK A,(SELECT CNT,R,DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,ENTRY_ID,POST_DT FROM (SELECT COUNT(*) CNT,MIN(ROWID) AS R,DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,ENTRY_ID,POST_DT FROM TEMP_HDFC_BANK GROUP BY DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,ENTRY_ID,POST_DT) WHERE CNT>1) B WHERE A.DEPOSIT_SLIP_NO=B.DEPOSIT_SLIP_NO AND A.INSTRUMENT_AMOUNT=B.INSTRUMENT_AMOUNT AND A.INSTRUMENT_NO=B.INSTRUMENT_NO AND A.ENTRY_ID=B.ENTRY_ID AND A.POST_DT=B.POST_DT AND A.ROWID!=B.R)
maan.db.upload3.duplicate.update= UPDATE TEMP_HDFC_BANK SET VALIDATE_STATUS = 'D' WHERE ROWID IN (SELECT A.ROWID FROM TEMP_HDFC_BANK A, (SELECT CNT, R, DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, ENTRY_ID, POST_DT, DR_CR FROM (SELECT COUNT ( * ) CNT, MIN (ROWID) AS R, DR_CR, DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, ENTRY_ID, POST_DT FROM TEMP_HDFC_BANK GROUP BY DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, ENTRY_ID, POST_DT, DR_CR) WHERE CNT > 1) B WHERE A.DEPOSIT_SLIP_NO = B.DEPOSIT_SLIP_NO AND A.INSTRUMENT_AMOUNT = B.INSTRUMENT_AMOUNT AND A.INSTRUMENT_NO = B.INSTRUMENT_NO AND A.ENTRY_ID = B.ENTRY_ID AND A.DR_CR = B.DR_CR AND A.POST_DT = B.POST_DT AND A.ROWID != B.R)
#UPDATE TEMP_HDFC_BANK SET VALIDATE_STATUS='D' WHERE ROWID IN (SELECT A.ROWID FROM TEMP_HDFC_BANK A,(SELECT CNT,R,DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,ENTRY_ID FROM (SELECT COUNT(*) CNT,MIN(ROWID) AS R,DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,ENTRY_ID FROM TEMP_HDFC_BANK GROUP BY DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,ENTRY_ID) WHERE CNT>1) B WHERE A.DEPOSIT_SLIP_NO=B.DEPOSIT_SLIP_NO AND A.INSTRUMENT_AMOUNT=B.INSTRUMENT_AMOUNT AND A.INSTRUMENT_NO=B.INSTRUMENT_NO AND A.ENTRY_ID=B.INSTRUMENT_NO AND A.ROWID!=B.R)

maan.db.upload3.duplicate.update1= UPDATE temp_hdfc_bank thb SET VALIDATE_STATUS = 'E' WHERE VALIDATE_STATUS = 'N' AND (DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, ENTRY_ID, DR_CR, TO_DATE (POST_DT, 'dd/mm/yyyy')) = (SELECT DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, ENTRY_ID, DR_CR, TRUNC (POST_DT) FROM hdfc_bank hb WHERE thb.DEPOSIT_SLIP_NO = hb.DEPOSIT_SLIP_NO AND THB.INSTRUMENT_AMOUNT = hb.INSTRUMENT_AMOUNT AND THB.INSTRUMENT_NO = hb.INSTRUMENT_NO AND THB.ENTRY_ID = hb.ENTRY_ID AND THB.DR_CR = HB.DR_CR AND TO_DATE (thb.POST_DT, 'dd/mm/yyyy') = TRUNC (hb.POST_DT))
#maan.db.upload3.duplicate.update1=update temp_hdfc_bank thb set VALIDATE_STATUS='E' where VALIDATE_STATUS = 'N' and (DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,ENTRY_ID,to_date(POST_DT,'dd/mm/yyyy')) =(select DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,ENTRY_ID,trunc(POST_DT) from hdfc_bank hb where thb.DEPOSIT_SLIP_NO=hb.DEPOSIT_SLIP_NO and THB.INSTRUMENT_AMOUNT=hb.INSTRUMENT_AMOUNT and THB.INSTRUMENT_NO=hb.INSTRUMENT_NO and THB.ENTRY_ID=hb.ENTRY_ID and to_date(thb.POST_DT,'dd/mm/yyyy')=trunc(hb.POST_DT) )
#UPDATE TEMP_HDFC_BANK SET VALIDATE_STATUS='E' WHERE  VALIDATE_STATUS='N' AND ENTRY_ID IN (SELECT A.ENTRY_ID FROM HDFC_BANK A,TEMP_HDFC_BANK B WHERE A.ENTRY_ID=B.ENTRY_ID AND B.VALIDATE_STATUS='N')

maan.db.hsbc.duplicate.update=UPDATE  TEMP_HSBC_BANK SET   VALIDATE_STATUS = 'D'  WHERE   ROWID IN (SELECT   A.ROWID FROM   TEMP_HSBC_BANK A, (SELECT   CNT,R, DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,DEPOSIT_DATE,DEBIT_CREDIT,POST_DATE FROM   (  SELECT   COUNT ( * ) CNT,MIN (ROWID) AS R,DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO, DEPOSIT_DATE,DEBIT_CREDIT,POST_DATE FROM   TEMP_HSBC_BANK GROUP BY   DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,DEPOSIT_DATE,DEBIT_CREDIT,POST_DATE)WHERE   CNT > 1) B WHERE       A.DEPOSIT_SLIP_NO = B.DEPOSIT_SLIP_NO AND A.INSTRUMENT_AMOUNT = B.INSTRUMENT_AMOUNT AND A.INSTRUMENT_NO = B.INSTRUMENT_NO AND A.DEPOSIT_DATE = B.DEPOSIT_DATE AND A.DEBIT_CREDIT=B.DEBIT_CREDIT AND A.POST_DATE=B.POST_DATE AND A.ROWID != B.R)
#UPDATE TEMP_HSBC_BANK SET VALIDATE_STATUS = 'D' WHERE ROWID IN (SELECT A.ROWID FROM TEMP_HSBC_BANK A, (SELECT CNT, R, DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, DEPOSIT_DATE FROM ( SELECT COUNT ( * ) CNT, MIN (ROWID) AS R, DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, DEPOSIT_DATE FROM TEMP_HSBC_BANK GROUP BY DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, DEPOSIT_DATE) WHERE CNT > 1) B WHERE A.DEPOSIT_SLIP_NO = B.DEPOSIT_SLIP_NO AND A.INSTRUMENT_AMOUNT = B.INSTRUMENT_AMOUNT AND A.INSTRUMENT_NO = B.INSTRUMENT_NO AND A.DEPOSIT_DATE = B.DEPOSIT_DATE AND A.ROWID != B.R)

maan.db.hsbc.duplicate.update1=update temp_hsbc_bank thb set VALIDATE_STATUS\='E' where VALIDATE_STATUS \= 'N' and (DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,to_date(DEPOSIT_DATE,'dd/mm/yyyy'),DEBIT_CREDIT,to_date(POST_DATE,'dd/mm/yyyy')) \=(select DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,trunc(DEPOSIT_DATE),DEBIT_CREDIT,trunc(POST_DATE) from hsbc_bank hsb where THB.DEPOSIT_SLIP_NO\=HSB.DEPOSIT_SLIP_NO and THB.INSTRUMENT_AMOUNT\=HSB.INSTRUMENT_AMOUNT and THB.INSTRUMENT_NO\=HSB.INSTRUMENT_NO and to_date(THB.DEPOSIT_DATE,'dd/mm/yyyy')\=trunc(hsb.DEPOSIT_DATE) and THB.DEBIT_CREDIT\=HSB.DEBIT_CREDIT and to_date(thb.POST_DATE,'dd/mm/yyyy')\=trunc(hsb.POST_DATE )) 
#UPDATE TEMP_HSBC_BANK SET VALIDATE_STATUS = 'E' WHERE VALIDATE_STATUS = 'N' AND DEPOSIT_SLIP_NO IN (SELECT A.DEPOSIT_SLIP_NO FROM HSBC_BANK A, TEMP_HSBC_BANK B WHERE A.DEPOSIT_SLIP_NO = B.DEPOSIT_SLIP_NO AND B.VALIDATE_STATUS = 'N')

maan.db.upload3.master.insert=INSERT INTO HDFC_BANK (MONTH,ROW_TYPE,ENTRY_ID,TYPE_OF_EN,DR_CR,ENTRY_AMT,VAL_DT,POST_DT,PROD_CODE,PKUP_LOC,PKUP_PT,PKUP_DT,DEPOSIT_SLIP_NO,DEPOSIT_DATE,DEPT_AMT,NO_OF_INST,DEPT_RMK,INSTRUMENT_NO,DRAWEE_BK,CL_LOC,INSTRUMENT_AMOUNT,INST_DT,DRAWER_NAM,DEAL_CODE,DEAL_NAME,DRAWER,POLICY_NO,RETURN_RSN,TRANSACTION_ID,BANK_NO) SELECT MONTH,ROW_TYPE,ENTRY_ID,TYPE_OF_EN,DR_CR,ENTRY_AMT,VAL_DT,POST_DT,PROD_CODE,PKUP_LOC,PKUP_PT,PKUP_DT,DEPOSIT_SLIP_NO,DEPOSIT_DATE,DEPT_AMT,NO_OF_INST,DEPT_RMK,INSTRUMENT_NO,DRAWEE_BK,CL_LOC,INSTRUMENT_AMOUNT,INST_DT,DRAWER_NAM,DEAL_CODE,DEAL_NAME,DRAWER,POLICY_NO,RETURN_RSN,BATCHID,HDFCBANKSEQ.NEXTVAL FROM TEMP_HDFC_BANK WHERE VALIDATE_STATUS='Y' AND BATCHID = ?

maan.db.upload3.duplicates.insert=INSERT INTO DUP_HDFC_BANK (MONTH,ROW_TYPE,ENTRY_ID,TYPE_OF_EN,DR_CR,ENTRY_AMT,VAL_DT,POST_DT,PROD_CODE,PKUP_LOC,PKUP_PT,PKUP_DT,DEPOSIT_SLIP_NO,DEPOSIT_DATE,DEPT_AMT,NO_OF_INST,DEPT_RMK,INSTRUMENT_NO,DRAWEE_BK,CL_LOC,INSTRUMENT_AMOUNT,INST_DT,DRAWER_NAM,DEAL_CODE,DEAL_NAME,DRAWER,POLICY_NO,RETURN_RSN,TRANSACTION_ID,STATUS) SELECT MONTH,ROW_TYPE,ENTRY_ID,TYPE_OF_EN,DR_CR,ENTRY_AMT,VAL_DT,POST_DT,PROD_CODE,PKUP_LOC,PKUP_PT,PKUP_DT,DEPOSIT_SLIP_NO,DEPOSIT_DATE,DEPT_AMT,NO_OF_INST,DEPT_RMK,INSTRUMENT_NO,DRAWEE_BK,CL_LOC,INSTRUMENT_AMOUNT,INST_DT,DRAWER_NAM,DEAL_CODE,DEAL_NAME,DRAWER,POLICY_NO,RETURN_RSN,BATCHID,VALIDATE_STATUS FROM TEMP_HDFC_BANK WHERE  VALIDATE_STATUS <>'Y'

maan.db.hsbc.duplicates.insert=INSERT INTO DUP_HSBC_BANK (MONTH, RECORD_IDENTIFIER, TXN_JOURNAL_NO, TYPE_OF_ENTRY, DEBIT_CREDIT, ENTRY_AMOUNT, DATE_OF_ENTRY, POST_DATE, PRODUCT_CODE, PICKUP_LOCATION, PICKUP_POINT, PICKUP_DATE, DEPOSIT_SLIP_NO, DEPOSIT_DATE, DEPOSIT_AMOUNT, NO_OF_INSTRUMENTS, DEPOSIT_REMARKS, INSTRUMENT_NO, DRAWEE_BANK, CLEARING_LOC, INSTRUMENT_AMOUNT, INSTRUMENT_DATE, DRAWER_NAME, MI_POLICY_NO, RETURN_REASON, CORRECT_CHQ_NO, CORRECT_CHQ_AMT, RSA_POLICY_NO, STATUS, TRANSACTION_ID) SELECT MONTH, RECORD_IDENTIFIER, TXN_JOURNAL_NO, TYPE_OF_ENTRY, DEBIT_CREDIT, ENTRY_AMOUNT, DATE_OF_ENTRY, POST_DATE, PRODUCT_CODE, PICKUP_LOCATION, PICKUP_POINT, PICKUP_DATE, DEPOSIT_SLIP_NO, DEPOSIT_DATE, DEPOSIT_AMOUNT, NO_OF_INSTRUMENTS, DEPOSIT_REMARKS, INSTRUMENT_NO, DRAWEE_BANK, CLEARING_LOC, INSTRUMENT_AMOUNT, INSTRUMENT_DATE, DRAWER_NAME, MI_POLICY_NO, RETURN_REASON, CORRECT_CHQ_NO, CORRECT_CHQ_AMT, RSA_POLICY_NO, VALIDATE_STATUS, BATCHID FROM TEMP_HSBC_BANK WHERE  VALIDATE_STATUS <>'Y'

maan.db.upload3.master.delete=DELETE FROM TEMP_HDFC_BANK 

maan.db.hsbc.master.delete=DELETE FROM TEMP_HSBC_BANK

maan.db.upload.transaction3.details=SELECT COUNT(*) FROM HDFC_BANK WHERE VALIDATE_STATUS\='Y' AND BATCHID \= ? 

maan.db.upload.hsbc.details=SELECT COUNT(*) FROM HSBC_BANK WHERE VALIDATE_STATUS\='Y' AND BATCHID \= ?

maan.db.upload3.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM DUP_HDFC_BANK WHERE STATUS IN ('E','D') AND TRANSACTION_ID = ?

maan.db.hsbc.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM DUP_HSBC_BANK WHERE STATUS IN ('E','D') AND TRANSACTION_ID = ?

###########################################

###################SCB BANK FILE UPLOAD###############


#maan.db.upload4.duplicate.update=UPDATE TEMP_SCB_BANK TS SET TS.VALIDATE_STATUS='D' WHERE TS.ROWID >(SELECT MIN(A.ROWID) FROM TEMP_SCB_BANK A WHERE A.DEPOSIT_NO=TS.DEPOSIT_NO AND A.CHEQUE_NO=TS.CHEQUE_NO AND A.CHQ_AMOUNT=TS.CHQ_AMOUNT GROUP BY DEPOSIT_NO,CHEQUE_NO,CHQ_AMOUNT)

#maan.db.upload4.duplicate.update1=UPDATE TEMP_SCB_BANK TS SET TS.VALIDATE_STATUS='E' WHERE TS.DEPOSIT_NO=(SELECT DISTINCT B.DEPOSIT_NO FROM SCB_BANK B WHERE B.DEPOSIT_NO=TS.DEPOSIT_NO AND B.CHEQUE_NO=TS.CHEQUE_NO AND B.CHQ_AMOUNT=TS.CHQ_AMOUNT GROUP BY DEPOSIT_NO,CHEQUE_NO,CHQ_AMOUNT) AND TS.CHEQUE_NO=(SELECT DISTINCT C.CHEQUE_NO FROM SCB_BANK C WHERE C.DEPOSIT_NO=TS.DEPOSIT_NO AND C.CHEQUE_NO=TS.CHEQUE_NO AND C.CHQ_AMOUNT=TS.CHQ_AMOUNT GROUP BY DEPOSIT_NO,CHEQUE_NO,CHQ_AMOUNT) AND TS.CHQ_AMOUNT=(SELECT DISTINCT D.CHQ_AMOUNT FROM SCB_BANK D WHERE D.DEPOSIT_NO=TS.DEPOSIT_NO AND D.CHEQUE_NO=TS.CHEQUE_NO AND D.CHQ_AMOUNT=TS.CHQ_AMOUNT GROUP BY DEPOSIT_NO,CHEQUE_NO,CHQ_AMOUNT)

maan.db.upload4.duplicate.update=UPDATE TEMP_SCB_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_SCB_BANK B WHERE  A.DEPOSIT_NO = B.DEPOSIT_NO AND A.CHEQUE_NO = B.CHEQUE_NO AND A.CHQ_AMOUNT = B.CHQ_AMOUNT  AND A.CR_DR = B.CR_DR AND A.DEPOSIT_DATE=B.DEPOSIT_DATE AND A.CREDIT_DEBIT_DT=B.CREDIT_DEBIT_DT)
#UPDATE TEMP_SCB_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_SCB_BANK B WHERE  A.DEPOSIT_NO = B.DEPOSIT_NO AND A.CHEQUE_NO = B.CHEQUE_NO AND A.CHQ_AMOUNT = B.CHQ_AMOUNT  AND A.CR_DR = B.CR_DR AND A.DEPOSIT_DATE=B.DEPOSIT_DATE)


maan.db.upload4.duplicate.update1=update temp_scb_bank tsb set VALIDATE_STATUS='E' where VALIDATE_STATUS = 'N' and (DEPOSIT_NO,CHEQUE_NO,CHQ_AMOUNT,CR_DR,to_date(DEPOSIT_DATE,'dd/mm/yyyy'),to_date(CREDIT_DEBIT_DT,'dd/mm/yyyy'))=(select DEPOSIT_NO,CHEQUE_NO,CHQ_AMOUNT,CR_DR,trunc(DEPOSIT_DATE),trunc(CREDIT_DEBIT_DT) from scb_bank sb where tsb.DEPOSIT_NO=sb.DEPOSIT_NO and TSB.CHEQUE_NO=sb.CHEQUE_NO and tsb.CHQ_AMOUNT=sb.CHQ_AMOUNT and tsb.CR_DR=sb.CR_DR and to_date(tsb.DEPOSIT_DATE,'dd/mm/yyyy')=trunc(sb.DEPOSIT_DATE) and to_date(tsb.CREDIT_DEBIT_DT,'dd/mm/yyyy')=trunc(sb.CREDIT_DEBIT_DT) )
#UPDATE TEMP_SCB_BANK SET VALIDATE_STATUS='E' WHERE   VALIDATE_STATUS='N' AND DEPOSIT_NO IN (SELECT A.DEPOSIT_NO FROM SCB_BANK A,TEMP_SCB_BANK B WHERE  A.CHEQUE_NO=B.CHEQUE_NO AND A.DEPOSIT_NO=B.DEPOSIT_NO  AND A.CHQ_AMOUNT=B.CHQ_AMOUNT AND B.VALIDATE_STATUS='N')  AND CHQ_AMOUNT IN (SELECT B.CHQ_AMOUNT FROM SCB_BANK A,TEMP_SCB_BANK B WHERE  A.CHEQUE_NO=B.CHEQUE_NO AND A.DEPOSIT_NO=B.DEPOSIT_NO  AND A.CHQ_AMOUNT=B.CHQ_AMOUNT AND B.VALIDATE_STATUS='N')

maan.db.upload4.duplicate.update3=UPDATE TEMP_SCB_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_SCB_BANK B WHERE  A.DEPOSIT_NO = B.DEPOSIT_NO AND A.CHEQUE_NO IS NULL AND  B.CHEQUE_NO IS NULL AND A.CHQ_AMOUNT = B.CHQ_AMOUNT  AND A.CR_DR = B.CR_DR AND A.DEPOSIT_DATE=B.DEPOSIT_DATE AND A.CREDIT_DEBIT_DT=B.CREDIT_DEBIT_DT)
#UPDATE TEMP_SCB_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_SCB_BANK B WHERE  A.DEPOSIT_NO = B.DEPOSIT_NO AND A.CHEQUE_NO IS NULL AND  B.CHEQUE_NO IS NULL AND A.CHQ_AMOUNT = B.CHQ_AMOUNT  AND A.CR_DR = B.CR_DR)

maan.db.upload4.duplicate.update4=update temp_scb_bank tsb set VALIDATE_STATUS='E' where VALIDATE_STATUS = 'N' and (DEPOSIT_NO,CHEQUE_NO,CHQ_AMOUNT,CR_DR,to_date(DEPOSIT_DATE,'dd/mm/yyyy'),to_date(CREDIT_DEBIT_DT,'dd/mm/yyyy'))=(select DEPOSIT_NO,CHEQUE_NO,CHQ_AMOUNT,CR_DR,trunc(DEPOSIT_DATE),trunc(CREDIT_DEBIT_DT) from scb_bank sb where tsb.DEPOSIT_NO=sb.DEPOSIT_NO and TSB.CHEQUE_NO is null and sb.CHEQUE_NO is null and tsb.CHQ_AMOUNT=sb.CHQ_AMOUNT and tsb.CR_DR=sb.CR_DR and to_date(tsb.DEPOSIT_DATE,'dd/mm/yyyy')=trunc(sb.DEPOSIT_DATE) and to_date(tsb.CREDIT_DEBIT_DT,'dd/mm/yyyy')=trunc(sb.CREDIT_DEBIT_DT) )
#UPDATE TEMP_SCB_BANK SET VALIDATE_STATUS='E' WHERE  VALIDATE_STATUS='N' AND DEPOSIT_NO IN (SELECT A.DEPOSIT_NO FROM SCB_BANK A,TEMP_SCB_BANK B WHERE  A.CHEQUE_NO IS NULL AND B.CHEQUE_NO IS NULL AND A.DEPOSIT_NO=B.DEPOSIT_NO  AND A.CHQ_AMOUNT=B.CHQ_AMOUNT  AND B.VALIDATE_STATUS='N')  AND  CHQ_AMOUNT IN (SELECT B.CHQ_AMOUNT FROM SCB_BANK A,TEMP_SCB_BANK B WHERE  A.CHEQUE_NO IS NULL AND B.CHEQUE_NO IS NULL AND A.DEPOSIT_NO=B.DEPOSIT_NO  AND A.CHQ_AMOUNT=B.CHQ_AMOUNT AND B.VALIDATE_STATUS='N')



######################################################


###################AXIS BANK FILE UPLOAD###############
#maan.db.upload5.duplicate.update=UPDATE TEMP_AXIS_BANK TS SET TS.VALIDATE_STATUS='D' WHERE TS.ROWID >(SELECT MIN(A.ROWID) FROM TEMP_AXIS_BANK A WHERE A.SLIP_NO=TS.SLIP_NO AND A.INST_NO=TS.INST_NO AND A.INSTRUMENT_AMOUNT=TS.INSTRUMENT_AMOUNT GROUP BY SLIP_NO,INST_NO,INSTRUMENT_AMOUNT)

#maan.db.upload5.duplicate.update1=UPDATE TEMP_AXIS_BANK TS SET TS.VALIDATE_STATUS='E' WHERE TS.SLIP_NO=(SELECT DISTINCT B.SLIP_NO FROM AXIS_BANK B WHERE B.SLIP_NO=TS.SLIP_NO AND B.INST_NO=TS.INST_NO AND B.INSTRUMENT_AMOUNT=TS.INSTRUMENT_AMOUNT GROUP BY SLIP_NO,INST_NO,INSTRUMENT_AMOUNT) AND TS.INST_NO=(SELECT DISTINCT C.INST_NO FROM AXIS_BANK C WHERE C.SLIP_NO=TS.SLIP_NO AND C.INST_NO=TS.INST_NO AND C.INSTRUMENT_AMOUNT=TS.INSTRUMENT_AMOUNT GROUP BY SLIP_NO,INST_NO,INSTRUMENT_AMOUNT) AND TS.INSTRUMENT_AMOUNT=(SELECT DISTINCT D.INSTRUMENT_AMOUNT FROM AXIS_BANK D WHERE D.SLIP_NO=TS.SLIP_NO AND D.INST_NO=TS.INST_NO AND D.INSTRUMENT_AMOUNT=TS.INSTRUMENT_AMOUNT GROUP BY SLIP_NO,INST_NO,INSTRUMENT_AMOUNT) 

maan.db.upload5.duplicate.update=UPDATE TEMP_AXIS_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_AXIS_BANK B WHERE  A.SLIP_NO = B.SLIP_NO AND A.INST_NO = B.INST_NO AND A.INSTRUMENT_AMOUNT = B.INSTRUMENT_AMOUNT  AND A.TYPE = B.TYPE AND A.CR_DATE=B.CR_DATE AND A.DEPOSIT_DATE=B.DEPOSIT_DATE)
#UPDATE TEMP_AXIS_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_AXIS_BANK B WHERE  A.SLIP_NO = B.SLIP_NO AND A.INST_NO = B.INST_NO AND A.INSTRUMENT_AMOUNT = B.INSTRUMENT_AMOUNT  AND A.TYPE = B.TYPE AND A.CR_DATE=B.CR_DATE)

maan.db.upload5.duplicate.update1=update temp_axis_bank axb set VALIDATE_STATUS='E' where VALIDATE_STATUS = 'N'  and (SLIP_NO,INST_NO,INSTRUMENT_AMOUNT,TYPE,to_date(DEPOSIT_DATE,'dd/mm/yyyy'),to_date(CR_DATE,'dd/mm/yyyy'))  =(select SLIP_NO,INST_NO,INSTRUMENT_AMOUNT,TYPE,trunc(DEPOSIT_DATE),trunc(CR_DATE) from axis_bank axis where axb.SLIP_NO=axis.SLIP_NO and axb.INST_NO=axis.INST_NO  and axb.INSTRUMENT_AMOUNT=axis.INSTRUMENT_AMOUNT and axb.TYPE=axis.type and to_date(axb.DEPOSIT_DATE,'dd/mm/yyyy')=trunc(axis.DEPOSIT_DATE) and to_date(axb.CR_DATE,'dd/mm/yyyy')=trunc(axis.CR_DATE) )
#UPDATE TEMP_AXIS_BANK SET VALIDATE_STATUS='E' WHERE  VALIDATE_STATUS='N' AND SLIP_NO IN (SELECT A.SLIP_NO FROM AXIS_BANK A,TEMP_AXIS_BANK B WHERE  A.INST_NO=B.INST_NO AND A.SLIP_NO=B.SLIP_NO  AND A.INSTRUMENT_AMOUNT=B.INSTRUMENT_AMOUNT AND A.TYPE = B.TYPE AND A.CR_DATE=to_date(B.CR_DATE,'dd/mm/yyyy') AND B.VALIDATE_STATUS='N')  AND INSTRUMENT_AMOUNT IN (SELECT B.INSTRUMENT_AMOUNT FROM AXIS_BANK A,TEMP_AXIS_BANK B WHERE  A.INST_NO=B.INST_NO AND A.SLIP_NO=B.SLIP_NO  AND A.INSTRUMENT_AMOUNT=B.INSTRUMENT_AMOUNT AND A.TYPE = B.TYPE AND A.CR_DATE=to_date(B.CR_DATE,'dd/mm/yyyy') AND B.VALIDATE_STATUS='N')

maan.db.upload5.duplicate.update3=UPDATE TEMP_AXIS_BANK A SET VALIDATE_STATUS = 'D' WHERE  ROWID>(SELECT  MIN(ROWID) FROM   TEMP_AXIS_BANK B WHERE  A.SLIP_NO = B.SLIP_NO AND A.INST_NO IS NULL AND  B.INST_NO IS NULL AND A.INSTRUMENT_AMOUNT = B.INSTRUMENT_AMOUNT  AND A.TYPE = B.TYPE AND A.CR_DATE=B.CR_DATE AND A.DEPOSIT_DATE=B.DEPOSIT_DATE)

maan.db.upload5.duplicate.update4=update temp_axis_bank axb set VALIDATE_STATUS='E' where VALIDATE_STATUS = 'N'  and (SLIP_NO,INST_NO,INSTRUMENT_AMOUNT,TYPE,to_date(DEPOSIT_DATE,'dd/mm/yyyy'),to_date(CR_DATE,'dd/mm/yyyy'))  =(select SLIP_NO,INST_NO,INSTRUMENT_AMOUNT,TYPE,trunc(DEPOSIT_DATE),trunc(CR_DATE) from axis_bank axis where axb.SLIP_NO=axis.SLIP_NO and axb.INST_NO is null and axis.INST_NO is null  and axb.INSTRUMENT_AMOUNT=axis.INSTRUMENT_AMOUNT and axb.TYPE=axis.type and to_date(axb.DEPOSIT_DATE,'dd/mm/yyyy')=trunc(axis.DEPOSIT_DATE) and to_date(axb.CR_DATE,'dd/mm/yyyy')=trunc(axis.CR_DATE) )
#UPDATE TEMP_AXIS_BANK SET VALIDATE_STATUS='E' WHERE VALIDATE_STATUS='N' AND  SLIP_NO IN (SELECT A.SLIP_NO FROM AXIS_BANK A,TEMP_AXIS_BANK B WHERE  A.INST_NO IS NULL AND B.INST_NO IS NULL AND A.SLIP_NO=B.SLIP_NO  AND A.INSTRUMENT_AMOUNT=B.INSTRUMENT_AMOUNT  AND A.TYPE = B.TYPE AND A.CR_DATE=to_date(B.CR_DATE,'dd/mm/yyyy') AND B.VALIDATE_STATUS='N')  AND  INSTRUMENT_AMOUNT IN (SELECT B.INSTRUMENT_AMOUNT FROM AXIS_BANK A,TEMP_AXIS_BANK B WHERE  A.INST_NO IS NULL AND B.INST_NO IS NULL AND A.SLIP_NO=B.SLIP_NO  AND A.INSTRUMENT_AMOUNT=B.INSTRUMENT_AMOUNT AND A.TYPE = B.TYPE AND A.CR_DATE=to_date(B.CR_DATE,'dd/mm/yyyy') AND B.VALIDATE_STATUS='N')

maan.db.transaction.axis.details=SELECT TO_CHAR (TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM AXIS_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID = T.TRANSACTION_NO AND RECEIPT_SL_NO != -99999 AND (R1.INST_NO IS NOT NULL AND R1.INST_NO <> ' ')) AS MATCHED,(SELECT COUNT (*) FROM AXIS_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL AND DISHONOUR_TYPE is null and R2.BATCHID = T.TRANSACTION_NO AND (R2.INST_NO IS NOT NULL OR R2.INST_NO <> ' ')) AS PENDING,PROCESSED,(SELECT COUNT(*) FROM AXIS_BANK R WHERE R.BATCHID = TRANSACTION_NO)AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_AXIS_BANK WHERE TRANSACTION_ID = T.TRANSACTION_NO AND STATUS NOT IN ('D', 'E', 'P')) AS INVALID,(SELECT COUNT (*) FROM AXIS_BANK C1 WHERE RECEIPT_SL_NO = -99999 AND C1.BATCHID = T.TRANSACTION_NO)AS REVERSALS FROM TRANSACTION_DETAILS T  WHERE FILE_TYPE = 'AXB' ORDER BY TRANSACTION_NO DESC
#####################################################
###TRANSACTIONS

maan.db.transaction.receipt.details=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY') AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM RECEIPT_MASTER R1 WHERE R1.BANK_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND R1.CHEQUE_NO IS NOT NULL AND R1.BANK_NO!=-88888) AS MATCHED,(SELECT COUNT(*) FROM RECEIPT_MASTER R2 WHERE R2.BANK_NO IS NULL AND R2.BATCHID=T.TRANSACTION_NO AND R2.CHEQUE_NO IS NOT NULL AND TRANS_SOURCE='RECT') AS PENDING,TOTAL_RECORDS AS PROCESSED,(SELECT COUNT(*) FROM RECEIPT_MASTER R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM RECEIPT_MASTER WHERE BATCHID=T.TRANSACTION_NO AND TRANS_SOURCE='PYMT') AS PAYMENT,(SELECT COUNT(*) FROM DUP_RECEIPT_MASTER WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM RECEIPT_MASTER R1 WHERE BANK_NO=-88888 AND R1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='R' ORDER BY TRANSACTION_NO DESC
maan.db.transaction.receipt.details.tranid=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY') AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM RECEIPT_MASTER R1 WHERE R1.BANK_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND R1.CHEQUE_NO IS NOT NULL AND R1.BANK_NO!=-88888) AS MATCHED,(SELECT COUNT(*) FROM RECEIPT_MASTER R2 WHERE R2.BANK_NO IS NULL AND R2.BATCHID=T.TRANSACTION_NO AND R2.CHEQUE_NO IS NOT NULL AND TRANS_SOURCE='RECT' AND MANUAL_UPDATE IS NULL) AS PENDING,TOTAL_RECORDS AS PROCESSED,(SELECT COUNT(*) FROM RECEIPT_MASTER R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM RECEIPT_MASTER WHERE BATCHID=T.TRANSACTION_NO AND TRANS_SOURCE='PYMT') AS PAYMENT,(SELECT COUNT(*) FROM DUP_RECEIPT_MASTER WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM RECEIPT_MASTER R1 WHERE BANK_NO=-88888 AND R1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='R' and transaction_no=? ORDER BY TRANSACTION_NO DESC

maan.db.transaction.receipt.details2=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY') AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM RECEIPT_MASTER R1 WHERE R1.BANK_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND R1.CHEQUE_NO IS NOT NULL AND R1.BANK_NO!=-88888) AS MATCHED,(SELECT COUNT(*) FROM RECEIPT_MASTER R2 WHERE R2.BANK_NO IS NULL AND R2.BATCHID=T.TRANSACTION_NO AND R2.CHEQUE_NO IS NOT NULL ) AS PENDING,TOTAL_RECORDS AS PROCESSED,(SELECT COUNT(*) FROM RECEIPT_MASTER R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM RECEIPT_MASTER WHERE BATCHID=T.TRANSACTION_NO AND TRANS_SOURCE='PYMT') AS PAYMENT,(SELECT COUNT(*) FROM DUP_RECEIPT_MASTER WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM RECEIPT_MASTER R1 WHERE BANK_NO=-88888 AND R1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='R' AND TRANSACTION_NO = ?

maan.db.transaction.citi.details=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM CITI_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND RECEIPT_SL_NO!=-99999 AND (R1.CHEQUE_NO IS NOT NULL AND R1.CHEQUE_NO <> ' ')) AS MATCHED,(SELECT COUNT(*) FROM CITI_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL and DISHONOUR_TYPE is null AND R2.BATCHID=T.TRANSACTION_NO AND (R2.CHEQUE_NO IS NOT NULL OR R2.CHEQUE_NO<>' ')) AS PENDING,PROCESSED,(SELECT COUNT(*) FROM CITI_BANK R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_CITI_BANK WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM CITI_BANK C1 WHERE RECEIPT_SL_NO=-99999 AND C1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='CIT' ORDER BY TRANSACTION_NO DESC

maan.db.transaction.hdfc.details=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM HDFC_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND RECEIPT_SL_NO!=-99999 AND (R1.INSTRUMENT_NO IS NOT NULL AND R1.INSTRUMENT_NO NOT LIKE ' ')  ) AS MATCHED,(SELECT COUNT(*) FROM HDFC_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL and DISHONOUR_TYPE is null AND R2.BATCHID=T.TRANSACTION_NO AND R2.INSTRUMENT_NO IS NOT NULL AND R2.INSTRUMENT_NO NOT LIKE ' ') AS PENDING,PROCESSED,(SELECT COUNT(*) FROM HDFC_BANK R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_HDFC_BANK WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM HDFC_BANK C1 WHERE RECEIPT_SL_NO=-99999 AND C1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='HDB' ORDER BY TRANSACTION_NO DESC

maan.db.transaction.hsbc.details=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM HSBC_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND RECEIPT_SL_NO!=-99999 AND (R1.INSTRUMENT_NO IS NOT NULL AND R1.INSTRUMENT_NO NOT LIKE ' ')  ) AS MATCHED,(SELECT COUNT(*) FROM HSBC_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL and DISHONOUR_TYPE is null AND R2.BATCHID=T.TRANSACTION_NO AND R2.INSTRUMENT_NO IS NOT NULL AND R2.INSTRUMENT_NO NOT LIKE ' ') AS PENDING,PROCESSED,(SELECT COUNT(*) FROM HSBC_BANK R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_HSBC_BANK WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM HSBC_BANK C1 WHERE RECEIPT_SL_NO=-99999 AND C1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='HSB' ORDER BY TRANSACTION_NO DESC

maan.db.transaction.scb.details=SELECT TO_CHAR (TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM SCB_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID \= T.TRANSACTION_NO AND RECEIPT_SL_NO \!\= -99999 AND (R1.CHEQUE_NO IS NOT NULL AND R1.CHEQUE_NO <> ' ')) AS MATCHED,(SELECT COUNT (*) FROM SCB_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL and DISHONOUR_TYPE is null AND R2.BATCHID \= T.TRANSACTION_NO AND (R2.CHEQUE_NO IS NOT NULL OR R2.CHEQUE_NO <> ' ')) AS PENDING,PROCESSED,(SELECT COUNT(*) FROM SCB_BANK R WHERE R.BATCHID \= TRANSACTION_NO)AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_SCB_BANK WHERE TRANSACTION_ID \= T.TRANSACTION_NO AND STATUS NOT IN ('D', 'E', 'P')) AS INVALID,(SELECT COUNT (*) FROM SCB_BANK C1 WHERE RECEIPT_SL_NO \= -99999 AND C1.BATCHID \= T.TRANSACTION_NO)AS REVERSALS FROM TRANSACTION_DETAILS T  WHERE FILE_TYPE \= 'SCB' ORDER BY TRANSACTION_NO DESC         

maan.db.transaction.receiptnos.details=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY') AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,(SELECT COUNT(*) FROM TEMP_RECEIPT_NUMBERS WHERE BATCHID=T.TRANSACTION_NO AND VALIDATE_STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*)  FROM RECEIPT_NUMBERS RN WHERE 'RECT'=RN.TRANS_SOURCE AND (RN.BANK_NO IS NULL AND RN.MANUAL_UPDATE IS NULL) AND  BATCHID=T.TRANSACTION_NO) AS PENDING , (SELECT COUNT(*)  FROM RECEIPT_NUMBERS RN WHERE 'RECT'=RN.TRANS_SOURCE AND (RN.BANK_NO IS NOT NULL OR RN.MANUAL_UPDATE IS NOT NULL) AND  BATCHID=T.TRANSACTION_NO) AS MATCHED FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='RN'  ORDER BY TRANSACTION_NO DESC

maan.db.transaction.receiptreversals.details=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY') AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,(SELECT COUNT(*)  FROM RECEIPT_REVERSAL RN WHERE  BATCHID=T.TRANSACTION_NO) AS PENDING , (SELECT COUNT(*)  FROM RECEIPT_REVERSAL RN,RECEIPT_MASTER RM WHERE RM.RECEIPT_NO=RN.RECEIPT_NO and  RN.BATCHID=T.TRANSACTION_NO and RN.STATUS IS NULL) AS AVAIL, (SELECT COUNT(*)  FROM RECEIPT_REVERSAL RN,RECEIPT_MASTER RM WHERE RM.RECEIPT_NO=RN.RECEIPT_NO and  RN.BATCHID=T.TRANSACTION_NO and RN.STATUS IS NOT NULL) AS MATCHED, (select count(distinct RN.payment_no) from receipt_reversal RN where RN.BATCHID=T.TRANSACTION_NO and RN.payment_no is not null) AS PAYMENTS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='RR'  ORDER BY TRANSACTION_NO DESC

###########################################
maan.db.upload.transactionseq=SELECT TRANSACTIONIDSEQ.NEXTVAL FROM DUAL

maan.db.upload.transstatus.update=UPDATE TEMP_DETAILS_MASTER TDM SET TRANS_DESC=(SELECT TRANS_DESC FROM TRANS_STATUS_MASTER WHERE UPPER(EXCEL_TRANS_DESC)=TRIM(UPPER(TDM.EXCEL_TRANS_DESC)) AND STATUS='Y')

maan.db.upload.transstatus.update1=UPDATE TEMP_DETAILS_MASTER SET TRANS_DESC=EXCEL_TRANS_DESC,STATUS='I' WHERE TRANS_DESC IS NULL

maan.db.upload.tempdate.update=UPDATE TEMP_DETAILS_MASTER SET TRANS_DATE=(CASE WHEN LENGTH(TRANS_DATE)>8 THEN SUBSTR(TRANS_DATE,2,9) ELSE TRANS_DATE END),TRANS_TIME=(CASE WHEN LENGTH(TRANS_TIME)=1 THEN '00000'||TRANS_TIME ELSE (CASE WHEN LENGTH(TRANS_TIME)=2 THEN '0000'||TRANS_TIME ELSE (CASE WHEN LENGTH(TRANS_TIME)=3 THEN '000'||TRANS_TIME ELSE (CASE WHEN LENGTH(TRANS_TIME)=4 THEN '00'||TRANS_TIME ELSE (CASE WHEN LENGTH(TRANS_TIME)=5 THEN '0'||TRANS_TIME ELSE (CASE WHEN LENGTH(TRANS_TIME)>6 THEN SUBSTR(TRANS_TIME,1,6) ELSE TRANS_TIME END) END) END) END) END) END),DATE_OF_ADMISSION=(CASE WHEN LENGTH(DATE_OF_ADMISSION)=1 THEN '0101100'||DATE_OF_ADMISSION ELSE (CASE WHEN LENGTH(DATE_OF_ADMISSION)=2 THEN '010110'||DATE_OF_ADMISSION ELSE (CASE WHEN LENGTH(DATE_OF_ADMISSION)=3 THEN '01011'||DATE_OF_ADMISSION ELSE (CASE WHEN LENGTH(DATE_OF_ADMISSION)=4 THEN '0101'||DATE_OF_ADMISSION ELSE (CASE WHEN LENGTH(DATE_OF_ADMISSION)=5 THEN '010'||DATE_OF_ADMISSION ELSE (CASE WHEN LENGTH(DATE_OF_ADMISSION)=6 THEN '01'||DATE_OF_ADMISSION ELSE (CASE WHEN LENGTH(DATE_OF_ADMISSION)>8 THEN SUBSTR(DATE_OF_ADMISSION,2,9) ELSE DATE_OF_ADMISSION END) END) END) END) END) END) END),DATE_OF_DISCHARGE=(CASE WHEN LENGTH(DATE_OF_DISCHARGE)=1 THEN '0101100'||DATE_OF_DISCHARGE ELSE (CASE WHEN LENGTH(DATE_OF_DISCHARGE)=2 THEN '010110'||DATE_OF_DISCHARGE ELSE (CASE WHEN LENGTH(DATE_OF_DISCHARGE)=3 THEN '01011'||DATE_OF_DISCHARGE ELSE (CASE WHEN LENGTH(DATE_OF_DISCHARGE)=4 THEN '0101'||DATE_OF_DISCHARGE ELSE (CASE WHEN LENGTH(DATE_OF_DISCHARGE)=5 THEN '010'||DATE_OF_DISCHARGE ELSE (CASE WHEN LENGTH(DATE_OF_DISCHARGE)=6 THEN '01'||DATE_OF_DISCHARGE ELSE (CASE WHEN LENGTH(DATE_OF_DISCHARGE)>8 THEN SUBSTR(DATE_OF_DISCHARGE,2,9) ELSE DATE_OF_DISCHARGE END) END) END) END) END) END) END)

maan.db.upload.otherinscompany.update=UPDATE TEMP_DETAILS_MASTER SET STATUS='O' WHERE INS_COMPANY_CODE!=?

maan.db.upload.otherinscompany.update1=UPDATE TEMP_DETAILS_MASTER SET STATUS='Y' WHERE INS_COMPANY_CODE=? AND STATUS='O'

maan.db.upload.transactioncount.details=SELECT ? ROWNO,SM.STATE_CODE,DM.DISTRICT_CODE,SM.STATE_NAME,DM.DISTRICT_NAME,(SELECT COUNT(*) FROM TEMP_DETAILS_MASTER  WHERE STATUS = 'D' AND STATE_CODE=SM.STATE_CODE AND DISTRICT_CODE=DM.DISTRICT_CODE AND TRANSACTION_ID=?) AS DUPLICATE_TOTAL,(SELECT COUNT(*) FROM TEMP_DETAILS_MASTER  WHERE STATUS = 'O' AND STATE_CODE=SM.STATE_CODE AND DISTRICT_CODE=DM.DISTRICT_CODE AND TRANSACTION_ID=?) AS OTHER_TOTAL,(SELECT COUNT(*) FROM TEMP_DETAILS_MASTER  WHERE STATUS = 'I' AND STATE_CODE=SM.STATE_CODE AND DISTRICT_CODE=DM.DISTRICT_CODE AND TRANSACTION_ID=?)+(SELECT COUNT(*) FROM DETAILS_MASTER  WHERE STATUS IN ('H','P','B','U','T') AND STATE_CODE=SM.STATE_CODE AND DISTRICT_CODE=DM.DISTRICT_CODE AND TRANSACTION_ID=?) AS INVALID_TOTAL,(SELECT COUNT(*) FROM DETAILS_MASTER  WHERE STATUS IN ('Y','N') AND STATE_CODE=SM.STATE_CODE AND DISTRICT_CODE=DM.DISTRICT_CODE AND UPPER(TRANS_DESC)='REGISTRATION' AND TRANSACTION_ID=?) AS REGISTER_TOTAL,(SELECT COUNT(*) FROM DETAILS_MASTER  WHERE STATUS IN ('Y','N') AND STATE_CODE=SM.STATE_CODE AND DISTRICT_CODE=DM.DISTRICT_CODE AND UPPER(TRANS_DESC)='BLOKING' AND TRANSACTION_ID=?) AS BLOCKED_TOTAL, (SELECT COUNT(*) FROM DETAILS_MASTER  WHERE STATUS IN ('Y','N') AND STATE_CODE=SM.STATE_CODE AND DISTRICT_CODE=DM.DISTRICT_CODE AND UPPER(TRANS_DESC)='UNBLOCKING' AND TRANSACTION_ID=?) AS UNBLOCKED_TOTAL, (SELECT COUNT(*) FROM DETAILS_MASTER  WHERE STATUS IN ('Y','N') AND STATE_CODE=SM.STATE_CODE AND DISTRICT_CODE=DM.DISTRICT_CODE AND UPPER(TRANS_DESC)='TRANSACTION' AND TRANSACTION_ID=?) AS TRANSACTED_TOTAL FROM STATE_MASTER SM, DISTRICT_MASTER DM WHERE SM.STATE_CODE=? AND DM.DISTRICT_CODE=? AND SM.STATE_CODE=DM.STATE_CODE
 
maan.db.upload.inserttranactionmaster.details=insert into TRANSACTION_MASTER(TRANSACTION_ID,TRANSACTION_DATE,UPLOAD_FILE_NAME,NO_OF_RECORDS,PAYMENT_RECORDS,TRANSACTED_RECORDS,UNBLOCKED_RECORDS,BLOCKED_RECORDS,REGISTERED_RECORDS,DUPLICATE_RECORDS,NON_INSURANCE_RECORDS,INVALID_RECORDS,STATUS,STATE_CODE,DISTRICT_CODE) values(?,sysdate,?,?,?,?,?,?,?,?,?,?,?,?,?)

maan.db.upload.transaction.details1= SELECT CNT+CNT1 FROM (SELECT COUNT(*) CNT FROM DETAILS_MASTER WHERE TRANSACTION_ID=? and district_code=? and state_code=?  ),(SELECT COUNT(*) CNT1 FROM TEMP_DETAILS_MASTER WHERE TRANSACTION_ID=? and district_code=? and state_code=?)

maan.db.upload.select.updatedetailsrecords=SELECT * FROM (select ROWNUM,tm.TRANSACTION_ID,to_char(tm.TRANSACTION_DATE,'dd-MM-yyyy') TRANSACTION_DATE, (select count(status) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='P' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE AND DISTRICT_CODE=tm.DISTRICT_CODE) pstatus, (select count(status) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='H' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE AND DISTRICT_CODE=tm.DISTRICT_CODE) hstatus, (select count(status) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='B' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE AND DISTRICT_CODE=tm.DISTRICT_CODE) BLOCKING,(select count(status) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='U' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE AND DISTRICT_CODE=tm.DISTRICT_CODE) UNBLOCKING,(select count(status) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='T' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE AND DISTRICT_CODE=tm.DISTRICT_CODE) TRANSACTION, (SELECT COUNT(*) FROM TEMP_NOT_UPLOADED WHERE INS_COMPANY_CODE=? AND TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE AND DISTRICT_CODE=tm.DISTRICT_CODE) ERRORREC from TRANSACTION_MASTER tm where tm.TRANSACTION_DATE>=to_date(?,'dd-MM-yyyy') and tm.TRANSACTION_DATE<=(to_date(?,'dd-MM-yyyy')+1) and tm.STATE_CODE=? and tm.DISTRICT_CODE=?) WHERE pstatus<>0 or hstatus<>0 or BLOCKING<>0 or UNBLOCKING<>0 or TRANSACTION<>0 or ERRORREC<>0

maan.db.upload.select.updatedetailsrecordsall=SELECT ROWNUM,a.* FROM (select distinct tm.TRANSACTION_ID,to_char(tm.TRANSACTION_DATE,'dd-MM-yyyy') TRANSACTION_DATE,  NVL((select sum(count(status)) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='P' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE group by TRANSACTION_ID),0) pstatus,  NVL((select sum(count(status)) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='H' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE group by TRANSACTION_ID),0) hstatus,  NVL((select sum(count(status)) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='B' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE group by TRANSACTION_ID),0) BLOCKING, NVL((select sum(count(status)) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='U' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE group by TRANSACTION_ID),0) UNBLOCKING, NVL((select sum(count(status)) from DETAILS_MASTER where INS_COMPANY_CODE=? and UPPER(status)='T' and TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE group by TRANSACTION_ID),0) TRANSACTION,  NVL((SELECT sum(COUNT(*)) FROM TEMP_NOT_UPLOADED WHERE INS_COMPANY_CODE=? AND TRANSACTION_ID=tm.TRANSACTION_ID AND STATE_CODE=tm.STATE_CODE group by TRANSACTION_ID),0) ERRORREC from TRANSACTION_MASTER tm where tm.TRANSACTION_DATE>=to_date(?,'dd-MM-yyyy') and tm.TRANSACTION_DATE<=(to_date(?,'dd-MM-yyyy')+1) and tm.STATE_CODE=? )a WHERE pstatus<>0 or hstatus<>0 or BLOCKING<>0 or UNBLOCKING<>0 or TRANSACTION<>0 or ERRORREC<>0

maan.db.upload.updateprocess.status=UPDATE DETAILS_MASTER SET STATUS='Y' WHERE INS_COMPANY_CODE=? AND TRANSACTION_ID=? AND STATE_CODE=? AND DISTRICT_CODE=? AND DETAILS_MASTER_ID IN(

# LOGIN SECTION QUERIES

maan.db.login.authentication=select USERTYPE,LOGIN_ID,INS_COMPANY_CODE,TO_CHAR(SYSDATE,'DD-MM-YYYY') ENDDATE,TO_CHAR(SYSDATE-30,'DD-MM-YYYY') STARTDATE from LOGIN_MASTER where LOGIN_ID=? and TRIM(PASSWORD)=? and status='1'

maan.db.login.sessioncheck=SELECT end_time,start_time,substr(((case when end_time is null then sysdate else end_time end)-start_time),instr(((case when end_time is null then sysdate else end_time end)-start_time),' ')+4,2) minutes,substr(((case when end_time is null then sysdate else end_time end)-start_time), instr(((case when end_time is null then sysdate else end_time end)-start_time),' ')+1,2)   hours from SESSION_MASTER where start_time in(select max(start_time) from SESSION_MASTER where login_id=? and to_char(start_time,'dd-mm-yyyy')=to_char(sysdate,'dd-mm-yyyy') and status='1') and status='1'

maan.db.login.insertsessioninfo=insert into SESSION_MASTER(SESSION_ID,LOGIN_ID,START_TIME,STATUS) values(?,?,sysdate,'1')

maan.db.login.updatesessioninfo=update SESSION_MASTER set end_time=sysdate where login_id=? and status='1' and session_id=?

maan.db.login.passdate=select PASSDATE from STTMAS_LOGIN WHERE LOGIN_ID=?

maan.db.menu.master=select a.MENU_ID,a.MENU_NAME,a.MENU_URL from STTMAS_MENU a, STTMAS_LOGIN_DETAILS b where a.MASTER_MENU_ID = ? and b.MENU_IDS like ('%,'||a.MENU_ID||',%') and b.LOGIN_ID=?  and b.active='1' order by a.order_No


#Common

maan.db.common.detailsbyid=select DM.TRANSACTION_ID,DM.DETAILS_MASTER_ID,DM.HOSPITAL_STATE_NAME,DM.HOSPITAL_DISTRICT_NAME,DM.HOSPITAL_NAME,DM.HOSPITAL_AUTH_ID,DM.INVOICE_NO,DM.URN_NO,DM.MEMBER_ID,DM.TRANS_DESC,DM.TRANS_TYPE,DM.TRANS_DATE,DM.TRANS_TIME,DM.PACKAGE_CODE,DM.INS_COMPANY_CODE,DM.TOT_CLAIM_AMOUNT,DM.TOT_BLOCK_AMOUNT,DM.INSUFFICIENT_FUND,DM.INSUFFICIENT_AMOUNT,DM.NO_OF_DAYS,DM.DATE_OF_ADMISSION,DM.DATE_OF_DISCHARGE,DM.MORTALITY,DM.AMOUNT_CLAIMED,DM.TRAVEL_AMOUNT_CLAIMED,DM.CUR_TOT_AMOUNT,DM.DISEASE,DM.PACKAGE_DESC,DM.GENDER,DM.PATIENT_NAME,DM.STATE_CODE,DM.STATE_NAME,DM.DISTRICT_CODE,DM.DISTRICT_NAME,DM.BLOCK_CODE,DM.BLOCK_NAME,DM.PANCHAYAT_TOWNCODE,DM.PANCHAYAT_TOWNNAME,DM.VILLAGE_CODE,DM.VILLAGE_NAME,DM.XGEN_CLAIM_NO,DM.PAYMENT_BLOCK_NUMBER,DM.PRE_AUTH_CODE,DM.AMOUNT_PAID,DM.INVEST_OFFICER_CODE,DM.INVEST_START_DATE,DM.INVEST_END_DATE,DM.INVEST_REMARKS,DM.INVEST_STATUS,DM.PAYMENT_STATUS,DM.STATUS,DM.REMARKS,DM.CLAIM_BLOCK_NUMBER,DM.INVEST_BLOCK_NUMBER,DM.DOCUMENTS_TOBE_COLLECTED,DM.DOCUMENTS_COLLECTED,DM.PACKORSUM_STATUS,DM.EXCEL_TRANS_DESC,(select (dm.AMOUNT_PAID*PM.TDS_AMOUNT/100)  from payment_master pm ,Details_master dm where DM.PAYMENT_BLOCK_NUMBER=PM.PAYMENT_BLOCK_NUMBER and DM.DETAILS_MASTER_ID=?) TDS_AMOUNT, (select (AMOUNT_PAID-(AMOUNT_PAID*PM.TDS_AMOUNT/100))  from payment_master pm ,Details_master dm where DM.PAYMENT_BLOCK_NUMBER=PM.PAYMENT_BLOCK_NUMBER and DM.DETAILS_MASTER_ID=?) CHEQUE_AMOUNT,(select  distinct invest_officer_name from INVESTIGATION_OFFICER IM,details_master DM where  DM.invest_officer_code=IM.invest_officer_code and DM.DETAILS_MASTER_ID=?) INVEST_OFFICER_NAME from Details_master DM where DM.DETAILS_MASTER_ID=?

maan.db.update.transaction.status=UPDATE TTRN_UPLOAD SET TOTAL_NO_OF_RECORDS = ?,UPLOAD_STATUS='E',ERROR_FILE_NAME=? WHERE BATCHID=?

maan.db.get.upload.validation.dtls=SELECT VALID_ID,TYPE_ID,EXCEL_HEADER_NAME,DB_COLUMN_NAME,ACTIVE,DATA_TYPE,DATA_FORMAT FROM TMAS_VALIDATION WHERE TYPE_ID = ? AND MFR_ID = ? ORDER BY VALID_ID

maan.db.get.receipt.batchid=SELECT DISTINCT BATCHID FROM TEMP_RECEIPT_MASTER WHERE BATCHID NOT IN (SELECT BATCHID FROM TTRN_UPLOAD)

maan.db.reversal.receipt.count=select unique to_char(receipt_date,'DD/MM/YYYY')  as rdate,count(*)  as rcount from receipt_master where receipt_date between to_date (?,'dd/mm/yyyy') and to_date (?,'dd/mm/yyyy') and bank_no=-88888 group by receipt_date order by 1 desc

maan.db.reversal.citibank.count=select unique to_char(deposit_date,'DD/MM/YYYY')  as rdate,count(*)  as rcount from citi_bank where deposit_date between to_date (?,'dd/mm/yyyy') and to_date(?,'dd/mm/yyyy') and receipt_sl_no=-99999 group by deposit_date order by 1 desc

maan.db.reversal.hdfcbank.count=select unique to_char(post_dt,'DD/MM/YYYY') as rdate,count(*) as rcount from hdfc_bank where post_dt between to_date (?,'dd/mm/yyyy') and to_date (?,'dd/mm/yyyy') and receipt_sl_no=-99999 group by post_dt order by 1 desc

maan.db.reversal.hsbcbank.count=select unique to_char(post_date,'DD/MM/YYYY')  as rdate,count(*)  as rcount from hsbc_bank where post_date between to_date (?,'dd/mm/yyyy') and to_date (?,'dd/mm/yyyy') and receipt_sl_no=-99999 group by post_date order by 1 desc

maan.db.reversal.scbbank.count=select unique to_char(deposit_date,'DD/MM/YYYY')  as rdate,count(*)  as rcount from scb_bank where deposit_date between to_date (?,'dd/mm/yyyy') and to_date (?,'dd/mm/yyyy') and receipt_sl_no=-99999 group by deposit_date order by 1 desc

maan.db.reversal.axisbank.count=select unique to_char(deposit_date,'DD/MM/YYYY')  as rdate,count(*)  as rcount from axis_bank where deposit_date between to_date (?,'dd/mm/yyyy') and to_date (?,'dd/mm/yyyy') and receipt_sl_no\=-99999 group by deposit_date order by 1 desc

maan.db.search.policy.search.function=SELECT rownum srno,RECEIPT_SL_NO,POLICY_NO,BANK_NAME,RECEIPT_NO,CHEQUE_NO,CHEQUE_AMT,CHEQUE_STATUS,CHEQUE_DATE,REALIZED_DATE,RETURN_REASON,MANUAL_UPDATE,nvl(trim(Status),'N') STATUS,MANUAL_REMARKS FROM TABLE(POLICYDETAIL_TYPE(?,?))
maan.db.search.manualrealization.search=SELECT rownum srno,POLICY_NO,BANK_NAME,RECEIPT_NO,CHEQUE_NO,CHEQUE_AMT,CHEQUE_STATUS,CHEQUE_DATE,RETURN_REASON,MANUAL_UPDATE,trim(STATUS) STATUS FROM TABLE(POLICYDETAIL_TYPE(?,?)) where manual_update='REALIZED'

maan.db.reports.query=select * from table(bank_details(?,?,?))
update.policy.numbers.duplicate=UPDATE   temp_policy_numbers A SET   VALIDATE_STATUS = 'D'  WHERE   ROWID > (SELECT   MIN (ROWID) FROM   temp_policy_numbers B  WHERE  A.policy_number=B.policy_number and A.batchid=(select max(batchid) from temp_policy_numbers))
update.policy.numbers={call POLICY_UPLOAD(?)}

policy.numbers.count=select realized,returned,Not_Known,NOT_AVAILABLE_IN_XGEN from (SELECT count(*) realized from policy_number where upper(status)=upper('realized') and batchid=?),(SELECT count(*) returned from policy_number where upper(status)=upper('returned') and batchid=?),(SELECT count(*) Not_Known from policy_number where upper(status)=upper('Not Known')  and batchid=?),(SELECT COUNT(*) NOT_AVAILABLE_IN_XGEN from policy_number where status is null and batchid=?)
update.receipts.manual=UPDATE   RECEIPT_MASTER RM  SET   MANUAL_UPDATE = 'Y', MANUAL_UPDATEDATE = SYSDATE,manual_remarks=( select manual_remarks from RECEIPT_NUMBERS RN where RECEIPT_NO IN (SELECT   RECEIPT_NO FROM   RECEIPT_NUMBERS RN WHERE   RN.RECEIPT_NO = RM.RECEIPT_NO AND batchid = (select max(BATCHID) from RECEIPT_NUMBERS)) and batchid = (select max(BATCHID) from RECEIPT_NUMBERS) ) WHERE   RECEIPT_NO IN  (SELECT   RECEIPT_NO  FROM   RECEIPT_NUMBERS RN  WHERE   RN.RECEIPT_NO = RM.RECEIPT_NO AND batchid = ?)

#(LOCAL)
maan.db.search.policy.search.mivbdata = SELECT rownum srno,NULL RECEIPT_SL_NO,POLICY_NO || '000100' POLICY_NO,null BANK_NAME,NULL RECEIPT_NO,INSTRUMENT_NO CHEQUE_NO,INSTRUMENT_AMOUNT CHEQUE_AMT,case when DR_CR='C' then 'Realized' when DR_CR='D' then 'Returned' else'NA'end   CHEQUE_STATUS, TO_CHAR(INSTRUMENT_DATE,'DD/MM/YYYY')  CHEQUE_DATE,null REALIZED_DATE, null RETURN_REASON,null MANUAL_UPDATE,null STATUS ,null MANUAL_REMARKS from MOTORS.mi_vb_data where
#(UAT)
#maan.db.search.policy.search.mivbdata = SELECT rownum srno,NULL RECEIPT_SL_NO,POLICY_NO || '000100' POLICY_NO,null BANK_NAME,NULL RECEIPT_NO,INSTRUMENT_NO CHEQUE_NO,INSTRUMENT_AMOUNT CHEQUE_AMT,case when DR_CR='C' then 'Realized' when DR_CR='D' then 'Returned' else'NA'end   CHEQUE_STATUS, TO_CHAR(INSTRUMENT_DATE,'DD/MM/YYYY')  CHEQUE_DATE,null REALIZED_DATE, null RETURN_REASON,null MANUAL_UPDATE,null STATUS ,null MANUAL_REMARKS from TSTFGMIDDLE.mi_vb_data where
#(LIVE)
#maan.db.search.policy.search.mivbdata = SELECT rownum srno,NULL RECEIPT_SL_NO,POLICY_NO || '000100' POLICY_NO,null BANK_NAME,NULL RECEIPT_NO,INSTRUMENT_NO CHEQUE_NO,INSTRUMENT_AMOUNT CHEQUE_AMT,case when DR_CR='C' then 'Realized' when DR_CR='D' then 'Returned' else'NA'end   CHEQUE_STATUS, TO_CHAR(INSTRUMENT_DATE,'DD/MM/YYYY')  CHEQUE_DATE,null REALIZED_DATE, null RETURN_REASON,null MANUAL_UPDATE,null STATUS ,null MANUAL_REMARKS from FGMIDDLELIV.mi_vb_data where

maan.db.transaction.hdfc.details.rep=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM HDFC_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND RECEIPT_SL_NO!=-99999 AND (R1.INSTRUMENT_NO IS NOT NULL AND R1.INSTRUMENT_NO NOT LIKE ' ')  ) AS MATCHED,(SELECT COUNT(*) FROM HDFC_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL and DISHONOUR_TYPE is null AND R2.BATCHID=T.TRANSACTION_NO AND R2.INSTRUMENT_NO IS NOT NULL AND R2.INSTRUMENT_NO NOT LIKE ' ') AS PENDING,PROCESSED,(SELECT COUNT(*) FROM HDFC_BANK R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_HDFC_BANK WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM HDFC_BANK C1 WHERE RECEIPT_SL_NO=-99999 AND C1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='HDB' 

maan.db.transaction.axis.details.rep=SELECT TO_CHAR (TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM AXIS_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID = T.TRANSACTION_NO AND RECEIPT_SL_NO != -99999 AND (R1.INST_NO IS NOT NULL AND R1.INST_NO <> ' ')) AS MATCHED,(SELECT COUNT (*) FROM AXIS_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL AND DISHONOUR_TYPE is null and R2.BATCHID = T.TRANSACTION_NO AND (R2.INST_NO IS NOT NULL OR R2.INST_NO <> ' ')) AS PENDING,PROCESSED,(SELECT COUNT(*) FROM AXIS_BANK R WHERE R.BATCHID = TRANSACTION_NO)AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_AXIS_BANK WHERE TRANSACTION_ID = T.TRANSACTION_NO AND STATUS NOT IN ('D', 'E', 'P')) AS INVALID,(SELECT COUNT (*) FROM AXIS_BANK C1 WHERE RECEIPT_SL_NO = -99999 AND C1.BATCHID = T.TRANSACTION_NO)AS REVERSALS FROM TRANSACTION_DETAILS T  WHERE FILE_TYPE = 'AXB' 

maan.db.transaction.citi.details.rep=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM CITI_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND RECEIPT_SL_NO!=-99999 AND (R1.CHEQUE_NO IS NOT NULL AND R1.CHEQUE_NO <> ' ')) AS MATCHED,(SELECT COUNT(*) FROM CITI_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL and DISHONOUR_TYPE is null AND R2.BATCHID=T.TRANSACTION_NO AND (R2.CHEQUE_NO IS NOT NULL OR R2.CHEQUE_NO<>' ')) AS PENDING,PROCESSED,(SELECT COUNT(*) FROM CITI_BANK R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_CITI_BANK WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM CITI_BANK C1 WHERE RECEIPT_SL_NO=-99999 AND C1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='CIT' 

maan.db.transaction.hsbc.details.rep=SELECT TO_CHAR(TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM HSBC_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID=T.TRANSACTION_NO AND RECEIPT_SL_NO!=-99999 AND (R1.INSTRUMENT_NO IS NOT NULL AND R1.INSTRUMENT_NO NOT LIKE ' ')  ) AS MATCHED,(SELECT COUNT(*) FROM HSBC_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL and DISHONOUR_TYPE is null AND R2.BATCHID=T.TRANSACTION_NO AND R2.INSTRUMENT_NO IS NOT NULL AND R2.INSTRUMENT_NO NOT LIKE ' ') AS PENDING,PROCESSED,(SELECT COUNT(*) FROM HSBC_BANK R WHERE R.BATCHID=TRANSACTION_NO) AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_HSBC_BANK WHERE TRANSACTION_ID=T.TRANSACTION_NO AND STATUS NOT IN ('D','E','P')) AS INVALID,(SELECT COUNT(*) FROM HSBC_BANK C1 WHERE RECEIPT_SL_NO=-99999 AND C1.BATCHID=T.TRANSACTION_NO) AS REVERSALS FROM TRANSACTION_DETAILS T WHERE FILE_TYPE='HSB' 

maan.db.transaction.scb.details.rep=SELECT TO_CHAR (TRANSACTION_DATE,'DD/MM/YYYY')AS TDATE,TRANSACTION_NO,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,(SELECT COUNT(*) FROM SCB_BANK R1 WHERE R1.RECEIPT_SL_NO IS NOT NULL AND R1.BATCHID \= T.TRANSACTION_NO AND RECEIPT_SL_NO \!\= -99999 AND (R1.CHEQUE_NO IS NOT NULL AND R1.CHEQUE_NO <> ' ')) AS MATCHED,(SELECT COUNT (*) FROM SCB_BANK R2 WHERE R2.RECEIPT_SL_NO IS NULL and DISHONOUR_TYPE is null AND R2.BATCHID \= T.TRANSACTION_NO AND (R2.CHEQUE_NO IS NOT NULL OR R2.CHEQUE_NO <> ' ')) AS PENDING,PROCESSED,(SELECT COUNT(*) FROM SCB_BANK R WHERE R.BATCHID \= TRANSACTION_NO)AS COUNTS,STATUS,(SELECT COUNT(*) FROM DUP_SCB_BANK WHERE TRANSACTION_ID \= T.TRANSACTION_NO AND STATUS NOT IN ('D', 'E', 'P')) AS INVALID,(SELECT COUNT (*) FROM SCB_BANK C1 WHERE RECEIPT_SL_NO \= -99999 AND C1.BATCHID \= T.TRANSACTION_NO)AS REVERSALS FROM TRANSACTION_DETAILS T  WHERE FILE_TYPE = 'SCB'          

maan.db.kotak.duplicate.update=UPDATE TEMP_KOTAK_BANK SET VALIDATE_STATUS = 'D' WHERE ROWID IN (SELECT A.ROWID FROM TEMP_KOTAK_BANK A, (SELECT CNT, R, DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, ENTRY_ID, POST_DT, Debit_Credit FROM (SELECT COUNT ( * ) CNT, MIN (ROWID) AS R, Debit_Credit, DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, ENTRY_ID, POST_DT FROM TEMP_KOTAK_BANK GROUP BY DEPOSIT_SLIP_NO, INSTRUMENT_AMOUNT, INSTRUMENT_NO, ENTRY_ID, POST_DT, Debit_Credit) WHERE CNT > 1) B WHERE A.DEPOSIT_SLIP_NO = B.DEPOSIT_SLIP_NO AND A.INSTRUMENT_AMOUNT = B.INSTRUMENT_AMOUNT AND A.INSTRUMENT_NO = B.INSTRUMENT_NO AND A.ENTRY_ID = B.ENTRY_ID AND A.Debit_Credit = B.Debit_Credit AND A.POST_DT = B.POST_DT AND A.ROWID != B.R)

maan.db.kotak.duplicate.update1=UPDATE TEMP_KOTAK_BANK thb set VALIDATE_STATUS='E' where VALIDATE_STATUS = 'N' and (DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,to_date(POST_DT,'dd/mm/yyyy')) =(select DEPOSIT_SLIP_NO,INSTRUMENT_AMOUNT,INSTRUMENT_NO,trunc(POST_DT) from KOTAK_BANK hb where thb.DEPOSIT_SLIP_NO=hb.DEPOSIT_SLIP_NO and THB.INSTRUMENT_AMOUNT=hb.INSTRUMENT_AMOUNT and THB.INSTRUMENT_NO=hb.INSTRUMENT_NO and to_date(thb.POST_DT,'dd/mm/yyyy')=trunc(hb.POST_DT) )

maan.db.kotak.duplicate.insert=INSERT INTO DUP_KOTAK_BANK (MONTH,TXN_JOURNAL_NO,DEBIT_CREDIT,PRODUCT_CODE,PICKUP_LOCATION,PICKUP_POINT,PICKUP_DATE,DEPOSIT_SLIP_NO,DEPOSIT_AMOUNT,NO_OF_INSTRUMENTS,DEPOSIT_REMARKS,INSTRUMENT_NO,DRAWEE_BANK,INSTRUMENT_AMOUNT,INSTRUMENT_DATE,DRAWER_NAME,RETURN_REASON,CORRECT_CHQ_AMT,DEPOSIT_DATE,REMARKS) SELECT MONTH,TXN_JOURNAL_NO,DEBIT_CREDIT,PRODUCT_CODE,PICKUP_LOCATION,PICKUP_POINT,PICKUP_DATE,DEPOSIT_SLIP_NO,DEPOSIT_AMOUNT,NO_OF_INSTRUMENTS,DEPOSIT_REMARKS,INSTRUMENT_NO,DRAWEE_BANK,INSTRUMENT_AMOUNT,INSTRUMENT_DATE,DRAWER_NAME,RETURN_REASON,CORRECT_CHQ_AMT,DEPOSIT_DATE,REMARKS FROM TEMP_KOTAK_BANK WHERE  VALIDATE_STATUS <>'Y'

maan.db.upload.kotaktransaction.details=SELECT COUNT(*) FROM KOTAK_BANK WHERE VALIDATE_STATUS\='Y' AND BATCHID \=?

maan.db.kotakupload.transactionerrorcount.details=SELECT COUNT(*) CUNT FROM DUP_KOTAK_BANK WHERE STATUS IN ('E','D') AND TRANSACTION_ID = ?

maan.db.upload2.KOT.update=UPDATE KOTAK_BANK SET STATUS='CN' WHERE INSTRUMENT_NO IS NULL OR INSTRUMENT_NO LIKE ' '

maan.db.upload2.transaction.insert2.115=INSERT INTO TRANSACTION_DETAILS (TRANSACTION_NO,FILE_TYPE,TOTAL_RECORDS,DUPLICATES,CHEQUE_EXISTS,CHEQUE_NOT_EXISTS,PROCESSED,TRANSACTION_DATE,INVALID) VALUES (?,?,?,?,(SELECT COUNT(*) FROM KOTAK_BANK WHERE (INSTRUMENT_NO IS NOT NULL AND INSTRUMENT_NO NOT LIKE ' ')   AND BATCHID=?),(SELECT COUNT(*) FROM KOTAK_BANK WHERE STATUS='CN' AND BATCHID=?),'N',SYSDATE,(SELECT COUNT(*) FROM DUP_KOTAK_BANK WHERE TRANSACTION_ID=? AND STATUS NOT IN ('D','E')))

maan.db.upload3.master.delete.KOT=DELETE FROM TEMP_KOTAK_BANK 

maan.db.transaction.kotak.details=SELECT to_char(transaction_date, 'DD/MM/YYYY') AS tdate, transaction_no, total_records, duplicates, cheque_exists, cheque_not_exists, ( SELECT COUNT(*) FROM kotak_bank r1 WHERE r1.receipt_sl_no IS NOT NULL AND r1.batchid = t.transaction_no AND receipt_sl_no != - 99999 AND ( r1.instrument_no IS NOT NULL AND r1.instrument_no NOT LIKE ' ' ) ) AS matched, ( SELECT COUNT(*) FROM kotak_bank r2 WHERE r2.receipt_sl_no IS NULL AND r2.batchid = t.transaction_no AND r2.instrument_no IS NOT NULL AND r2.instrument_no NOT LIKE ' ' ) AS pending, processed, ( SELECT COUNT(*) FROM kotak_bank r WHERE r.batchid = transaction_no ) AS counts, status, ( SELECT COUNT(*) FROM dup_kotak_bank WHERE transaction_id = t.transaction_no AND status NOT IN ( 'D', 'E', 'P' ) ) AS invalid, ( SELECT COUNT(*) FROM kotak_bank c1 WHERE receipt_sl_no = - 99999 AND c1.batchid = t.transaction_no ) AS reversals FROM transaction_details t WHERE file_type = 'KOT' ORDER BY transaction_no DESC