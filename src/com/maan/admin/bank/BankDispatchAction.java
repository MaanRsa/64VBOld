/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.maan.admin.bank;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;



import com.maan.common.LogManager;
import com.maan.common.exception.CommonBaseException;

/** 
 * MyEclipse Struts
 * Creation date: 10-27-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="addBank" path="/WEB-INF/jsp/bank/addNewBank.jsp"
 */
public class BankDispatchAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	ActionForward forward;
	private final static String PATH="addBank";
	private final static String LIST="list";
	private final static String SHOW="show";
	
	public ActionForward newBank(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{
		LogManager.push("Enter Into newBank() Method");
		final ArrayList list;
		final BankForm vbean = (BankForm)form;
		final BankCB sCB=new BankCB();
		
		list=(ArrayList) sCB.getBankDetails();
		
		request.setAttribute(LIST,list);

		request.setAttribute(SHOW,"DisplayBank");
		
		forward = mapping.findForward(PATH);
				return forward;
	}
	
	public ActionForward addNewBank(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
			{
		        LogManager.push("enter into AddNewBank() method");
		        
		        final BankForm vbean = (BankForm)form;
		       // bankId=(String)sCB.getMaxBankId();
		       vbean.setBankid("");
		      //  vbean.setBankcode("");
		        vbean.setBankname("");
		        vbean.setBanktable("");
		        vbean.setChequeamt("");
		        vbean.setChequeno("");
		        vbean.setChequestatus("");
		        vbean.setReason("");
		        vbean.setActive("N ");
		        vbean.setReceiptNo("");
		        request.setAttribute(SHOW,"showAddPage");
			    forward=mapping.findForward(PATH);
		        LogManager.push("exit into AddNewBank() method");
		        return forward;
		 	}
	
	public ActionForward insertNewBank(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{
		LogManager.push("Enter into insertNewBank() method");
		BankForm sform=(BankForm) form;
		final BankVB sVB=new BankVB();
		final BankCB sCB=new BankCB();
		final String bankid=sform.getBankid();
		
		final String banktable=sform.getBanktable();
		final String bankname=sform.getBankname();
		final String chequeno=sform.getChequeno();
		final String chequeamt=sform.getChequeamt();
		final String chequestatus=sform.getChequestatus();
		final String reason=sform.getReason();
		final String active=sform.getActive();
		final String receiptNo=sform.getReceiptNo();
		LogManager.push("chequeno:"+chequeno+"chequeamt:"+chequeamt+"chequestatus:"+chequestatus+"reason:"+reason);
		ActionErrors errors = new ActionErrors();
		errors = validation(bankid, "bid", errors);
		errors = validation(banktable, "btable", errors);
		errors = validation(bankname, "bname", errors);
		errors = validation(chequeno, "chequeno", errors);
		errors = validation(chequestatus, "status", errors);
		errors = validation(chequeamt, "chequeamt", errors);
		errors = validation(reason, "reason", errors);
		errors = validation(active, "active", errors);
		errors = validation(receiptNo, "receiptno", errors);
		if(errors.isEmpty())
		{
			sVB.setBankid(bankid);
			sVB.setBanktable(banktable);
			sVB.setBankname(bankname);
			sVB.setChequeno(chequeno);
			sVB.setChequestatus(chequestatus);
			sVB.setChequeamt(chequeamt);
			sVB.setReason(reason);
			sVB.setActive(active);
			sVB.setReceiptNo(receiptNo);
			final int result=sCB.insertBankDetails(sVB);
			if(result==2)
			{
				errors.add("",new ActionError("error.bank.exists"));
				request.setAttribute(SHOW,"showAddPage");
			   	saveMessages(request, errors);
				saveErrors(request, errors);
			}
			else
			{
			LogManager.push("final result------------>"+result);
			final ArrayList list;
			list=(ArrayList) sCB.getBankDetails();
			
			request.setAttribute(LIST,list);
			request.setAttribute(SHOW,"DisplayBank");
		   
			}
		}
		else
		{
			request.setAttribute(SHOW,"showAddPage");
		   	saveMessages(request, errors);
			saveErrors(request, errors);
		}
		
		  forward=mapping.findForward(PATH);
			
		LogManager.push("end insertNewBank() method");
		 
		return forward;
	}
	
	public ActionForward getEdit(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{

		LogManager.push("Enter into getEdit() method in Action");
		String bankid=request.getParameter("bankid")==null?"":request.getParameter("bankid");
		BankCB sCB=new BankCB();
		final BankVB sVB=new BankVB();
		BankForm sform=(BankForm) form;
		final List list;
		 list=(List)sCB.getEditBankDetails(bankid);
		 Map mp;
		 mp=(Map)list.get(0);
		 sform.setBankid((String)mp.get("BANK_ID")+"");
		 sform.setBanktable((String)mp.get("TABLE_NAME")+"");
		 sform.setBankname((String)mp.get("BANK_NAME")+"");
		 sform.setChequeno((String)mp.get("CHEQUE_NO")+"");
		 sform.setChequestatus((String)mp.get("CHEQUE_STATUS")+"");
		 sform.setChequeamt((String)mp.get("CHEQUE_AMT")+"");
		 sform.setReason((String)mp.get("REASON")+"");
		 sform.setActive((String)mp.get("STATUS"));
		 sform.setReceiptNo((String)mp.get("RECEIPT_NO"));
		 LogManager.push("Radio->>>"+(String)mp.get("STATUS"));
		 request.setAttribute(SHOW,"edit");
		 mapping.findForward(PATH);
		 
		
		LogManager.push("EXIT getEdit() method in Action");
		return forward;
	}
	public ActionForward updateBank(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
			{
		
				LogManager.push("enter updateBank () method");
				String bankid=request.getParameter("bankid")==null?"":request.getParameter("bankid");
				BankForm sform =(BankForm) form;
				final BankVB sVB=new BankVB();
				final BankCB sCB=new BankCB();
				final ArrayList list;
				
				final String banktable=sform.getBanktable();
				final String bankname=sform.getBankname();
				final String chequeno=sform.getChequeno();
				final String chequeamt=sform.getChequeamt();
				final String chequestatus=sform.getChequestatus();
				final String reason=sform.getReason();
				final String active=sform.getActive();
				final String receiptNo=sform.getReceiptNo();
				
				LogManager.push("chequeno:"+chequeno+"chequeamt:"+chequeamt+"chequestatus:"+chequestatus+"reason:"+reason);
				ActionErrors errors = new ActionErrors();
				errors = validation(bankid, "bid", errors);
				errors = validation(banktable, "btable", errors);
				errors = validation(bankname, "bname", errors);
				errors = validation(chequeno, "chequeno", errors);
				errors = validation(chequestatus, "status", errors);
				errors = validation(chequeamt, "chequeamt", errors);
				errors = validation(reason, "reason", errors);
				errors = validation(active, "active", errors);
				errors = validation(receiptNo, "reeiptno", errors);
				
				if(errors.isEmpty())
				{
					sVB.setBankid(bankid);
					sVB.setBanktable(banktable);
					sVB.setBankname(bankname);
					sVB.setChequeno(chequeno);
					sVB.setChequestatus(chequestatus);
					sVB.setChequeamt(chequeamt);
					sVB.setReason(reason);
					sVB.setActive(active);
					sVB.setReceiptNo(receiptNo);
					final int result=sCB.updateBankDetails(sVB,bankid);
					LogManager.push("Update result->>>>>"+result);
					list=(ArrayList) sCB.getBankDetails();
					request.setAttribute(LIST,list);
					LogManager.push("final result------------>"+result);
					request.setAttribute(SHOW,"DisplayBank");
					
					
				}
				else
				{
					saveMessages(request, errors);
					saveErrors(request, errors);
					request.setAttribute(SHOW,"edit");
				}
				
				
				forward = mapping.findForward(PATH);
				LogManager.push("end insertNewBank() method");
					 
	            return forward;
			}
	private ActionErrors validation(final String value, final String field,
			final ActionErrors errors) {
		try {
			LogManager.push("BankForm Controller validation method() - Enter");

			if (value == null || value.length() < 1
					|| value.equalsIgnoreCase("Select")) {
				errors.add(field, new ActionError("error.bank." +field+ ".required"));
			}

		} catch (Exception e) {
			LogManager.debug(e);

		} finally {
			LogManager
					.debug("BankForm Controller validation- Exit");
			LogManager.popRemove();
		}

		return errors;
	}
	
	
	
}