/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.maan.admin.bankRejection;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;



import com.maan.admin.bankAcct.BankAcctCB;
import com.maan.common.LogManager;
import com.maan.common.exception.CommonBaseException;

/** 
 * MyEclipse Struts
 * Creation date: 10-27-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="addBank" path="/WEB-INF/jsp/bank/addNewBank.jsp"
 */
public class BankRejectionDispatchAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	ActionForward forward;
	private final static String PATH="bankRejection";
	private final static String LIST="list";
	private final static String SHOW="show";
	
	public ActionForward newBankRejection(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{
		LogManager.push("Enter Into newBankRejection() Method");
		//LogManager.push("Enter Into newBankRejection() Method");
		final ArrayList list;
		final BankRejectionForm vbean = (BankRejectionForm)form;
		final BankRejectionCB sCB=new BankRejectionCB();
		
		list=(ArrayList) sCB.getBankRejectionDetails();
		
		request.setAttribute(LIST,list);

		request.setAttribute(SHOW,"DisplayBankRejection");
		
		forward = mapping.findForward(PATH);
				return forward;
	}
	
	public ActionForward addNewBankRejection(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
			{
		        LogManager.push("enter into addNewBankRejection() method");
		        final BankAcctCB sCB=new BankAcctCB();
		        final Map bankList = sCB.getBankList();
		   	    request.setAttribute("BankList", bankList);
		        final BankRejectionForm vbean = (BankRejectionForm)form;
		        vbean.setRejectiontypedesc("");
		        vbean.setRejectiontypeid("");
		        vbean.setStatus("N ");
		        request.setAttribute(SHOW,"showAddPage");
			    forward=mapping.findForward(PATH);
		        LogManager.push("exit into addNewBankRejection() method");
		        return forward;
		 	}
	
	public ActionForward insertNewBankRejection(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{
		LogManager.push("Enter into insertNewBankRejection() method");
		BankRejectionForm sform=(BankRejectionForm) form;
		final BankRejectionVB sVB=new BankRejectionVB();
		final BankRejectionCB sCB=new BankRejectionCB();
		final String rejectiontypeid=sform.getRejectiontypeid();
		final String rejectiondesc=sform.getRejectiontypedesc();
		final String active=sform.getStatus();
		ActionErrors errors = new ActionErrors();
		errors = validation(rejectiontypeid, "rejectid", errors);
		errors = validation(rejectiondesc, "rejectdesc", errors);
		errors = validation(active, "active", errors);
		
		if(errors.isEmpty())
		{
			sVB.setRejectiontypeid(rejectiontypeid);
			sVB.setRejectiontypedesc(rejectiondesc);
			sVB.setStatus(active);
			final int result=sCB.insertBankRejectionDetails(sVB);
			if(result==2)
			{
				errors.add("",new ActionError("error.rejection.exists"));
				request.setAttribute(SHOW,"showAddPage");
			   	saveMessages(request, errors);
				saveErrors(request, errors);
			}else
			{
			LogManager.push("final result------------>"+result);
			final ArrayList list;
			list=(ArrayList) sCB.getBankRejectionDetails();
			request.setAttribute(LIST,list);
			request.setAttribute(SHOW,"DisplayBankRejection");
			}
		
			
		}
		else
		{
			request.setAttribute(SHOW,"showAddPage");
		   	saveMessages(request, errors);
			saveErrors(request, errors);
		}
		
		  forward=mapping.findForward(PATH);
			
		LogManager.push("end insertNewBankRejection() method");
		 
		return forward;
	}
	
	public ActionForward getEdit(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{

		LogManager.push("Enter into getEdit() method in Action");
		String rejectid=request.getParameter("rejectionid")==null?"":request.getParameter("rejectionid");
		BankRejectionCB sCB=new BankRejectionCB();
		final BankRejectionVB sVB=new BankRejectionVB();
		BankRejectionForm sform=(BankRejectionForm) form;
		final List list;
		 list=(List)sCB.getEditBankRejectionDetails(rejectid);
		 Map mp;
		 mp=(Map)list.get(0);
			
		 sform.setRejectiontypedesc((String)mp.get("REJECTION_TYPE_DESC")+"");
		 sform.setRejectiontypeid((String)mp.get("REJECTION_TYPE_ID")+"");
		 sform.setStatus((String)mp.get("STATUS"));
		 LogManager.push("Radio->>>"+(String)mp.get("STATUS"));
		 request.setAttribute(SHOW,"edit");
		 mapping.findForward(PATH);
		 
		
		LogManager.push("EXIT getEdit() method in Action");
		return forward;
	}
	
	
	public ActionForward updateBankRejection(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
			{
		
				LogManager.push("enter updateBankRejection () method");
				String rejectionid=request.getParameter("rejectionid")==null?"":request.getParameter("rejectionid");
				BankRejectionForm sform =(BankRejectionForm) form;
				final BankRejectionVB sVB=new BankRejectionVB();
				final BankRejectionCB sCB=new BankRejectionCB();
				final ArrayList list;
				
				final String rejectiontypeid=sform.getRejectiontypeid();
				final String rejectiondesc=sform.getRejectiontypedesc();
				final String active=sform.getStatus();
				ActionErrors errors = new ActionErrors();
				errors = validation(rejectiontypeid, "rejectid", errors);
				errors = validation(rejectiondesc, "rejectdesc", errors);
				errors = validation(active, "active", errors);
			
				
				if(errors.isEmpty())
				{
					sVB.setRejectiontypeid(rejectiontypeid);
					sVB.setRejectiontypedesc(rejectiondesc);
					sVB.setStatus(active);
					final int result=sCB.updateBankRejectionDetails(sVB,rejectionid);
					
					LogManager.push("Update result->>>>>"+result);
					list=(ArrayList) sCB.getBankRejectionDetails();
					request.setAttribute(LIST,list);
					LogManager.push("final result------------>"+result);
					request.setAttribute(SHOW,"DisplayBankRejection");
					
					
				}
				else
				{
					saveMessages(request, errors);
					saveErrors(request, errors);
					request.setAttribute(SHOW,"edit");
				}
				
				
				forward = mapping.findForward(PATH);
				LogManager.push("end updateBankRejection() method");
					 
	            return forward;
			}
			
	private ActionErrors validation(final String value, final String field,
			final ActionErrors errors) {
		try {
			LogManager.push("BankForm Controller validation method() - Enter");

			if (value == null || value.length() < 1
					|| value.equalsIgnoreCase("Select")) {
				errors.add(field, new ActionError("error.bankreject." +field+ ".required"));
			}

		} catch (Exception e) {
			LogManager.debug(e);

		} finally {
			LogManager
					.debug("BankForm Controller validation- Exit");
			LogManager.popRemove();
		}

		return errors;
	}
	
	
	
}