/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.maan.admin.bankError;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;



import com.maan.admin.bankAcct.BankAcctCB;
import com.maan.common.LogManager;
import com.maan.common.exception.CommonBaseException;

/** 
 * MyEclipse Struts
 * Creation date: 10-27-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="addBank" path="/WEB-INF/jsp/bank/addNewBank.jsp"
 */
public class BankErrorDispatchAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	ActionForward forward;
	private final static String PATH="bankError";
	private final static String LIST="list";
	private final static String SHOW="show";
	
	public ActionForward newBankError(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{
		LogManager.push("Enter Into newBankError() Method");
	    //LogManager.push("Enter Into newBankError() Method");
		final ArrayList list;
		final BankErrorForm vbean = (BankErrorForm)form;
		final BankErrorCB sCB=new BankErrorCB();
		
		list=(ArrayList) sCB.getBankErrorDetails();
		
		request.setAttribute(LIST,list);

		request.setAttribute(SHOW,"DisplayBankError");
		
		forward = mapping.findForward(PATH);
				return forward;
	}
	
	public ActionForward addNewBankError(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
			{
		        LogManager.push("enter into AddNewBank() method");
		        final String errorId;
		        final BankErrorForm vbean = (BankErrorForm)form;
		        final BankErrorCB sCB=new BankErrorCB();
		        final BankAcctCB bCB = new BankAcctCB();
				final Map bankList = bCB.getBankList();
				request.setAttribute("BankList", bankList);
				final Map rejectionTypeList = sCB.getBankRejectionList();
				//LogManager.push("Reject list size:"+rejectionTypeList.size());
				request.setAttribute("RejectionTypeList", rejectionTypeList);
		      
				vbean.setBankid("Select");
		        vbean.setReasondesc("");
		        vbean.setRejectionType("Select");
		        vbean.setActive("N ");
		        request.setAttribute(SHOW,"showAddPage");
			    forward=mapping.findForward(PATH);
		        LogManager.push("exit into AddNewBank() method");
		        return forward;
		 	}
	
	public ActionForward insertNewBankError(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{
		LogManager.push("Enter into insertNewBankError() method");
		BankErrorForm sform=(BankErrorForm) form;
		final BankErrorVB sVB=new BankErrorVB();
		final BankErrorCB sCB=new BankErrorCB();
		
		final String bankid=sform.getBankid();
		final String reasondesc=sform.getReasondesc();
		final String active=sform.getActive();
		final String rejectionType=sform.getRejectionType();
		final BankAcctCB bCB = new BankAcctCB();
		final Map bankList = bCB.getBankList();
		request.setAttribute("BankList", bankList);
		final Map rejectionTypeList = sCB.getBankRejectionList();
		request.setAttribute("RejectionTypeList", rejectionTypeList);
        
		ActionErrors errors = new ActionErrors();
		errors = validation(bankid, "bname", errors);
		errors = validation(reasondesc, "reasondesc", errors);
		errors = validation(rejectionType, "rejectiontype", errors);
		errors = validation(active, "active", errors);
		
		if(errors.isEmpty())
		{
			sVB.setBankid(bankid);
			sVB.setActive(active);
			sVB.setReasondesc(reasondesc);
			sVB.setRejectionType(rejectionType);
			sVB.setActive(active);
			final int result=sCB.insertBankErrorDetails(sVB);
			if(result==2)
			{
				errors.add("",new ActionError("bank.error.exists"));
				
				request.setAttribute(SHOW,"showAddPage");
			   	saveMessages(request, errors);
				saveErrors(request, errors);
			}
			else
			{
			LogManager.push("final result------------>"+result);
			final ArrayList list;
			list=(ArrayList) sCB.getBankErrorDetails();
			
			request.setAttribute(LIST,list);
			request.setAttribute(SHOW,"DisplayBankError");
			}
			
		}
		else
		{
			request.setAttribute(SHOW,"showAddPage");
		   	saveMessages(request, errors);
			saveErrors(request, errors);
		}
		
		  forward=mapping.findForward(PATH);
			
		LogManager.push("end insertNewBankError() method");
		 
		return forward;
	}

	public ActionForward getEdit(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
	{

		LogManager.push("Enter into getEdit() method in Action");
		String bankid=request.getParameter("errorid")==null?"":request.getParameter("errorid");
		BankErrorCB sCB=new BankErrorCB();
		final BankErrorVB sVB=new BankErrorVB();
		BankErrorForm sform=(BankErrorForm) form;
		final BankAcctCB bCB = new BankAcctCB();
		final Map bankList = bCB.getBankList();
		request.setAttribute("BankList", bankList);
		LogManager.push(request.getParameter("d-446779-p"));
		final Map rejectionTypeList = sCB.getBankRejectionList();
		//LogManager.push("Reject list size:"+rejectionTypeList.size());
		request.setAttribute("RejectionTypeList", rejectionTypeList);
		final List list;
		 list=(List)sCB.getEditBankErrorDetails(bankid);
		 LogManager.push("list size " + list.size());
		 Map mp;
		 mp=(Map)list.get(0);
			
		 sform.setBankid((String)mp.get("BANK_ID")+"");
		 sform.setReasondesc((String)mp.get("REASON_DESC")+"");
		 sform.setRejectionType((String)mp.get("REJECTION_TYPE")+"");
		 sform.setActive((String)mp.get("STATUS"));
		 LogManager.push("Radio->>>"+(String)mp.get("STATUS"));
		 request.setAttribute(SHOW,"edit");
		 mapping.findForward(PATH);
		 
		
		LogManager.push("EXIT getEdit() method in Action");
		return forward;
	}
	
	public ActionForward updateBankError(ActionMapping mapping,ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws CommonBaseException
			{
		
				LogManager.push("enter updateBankError () method");
				String errorid=request.getParameter("errorid")==null?"":request.getParameter("errorid");
				BankErrorForm sform =(BankErrorForm) form;
				final BankErrorVB sVB=new BankErrorVB();
				final BankErrorCB sCB=new BankErrorCB();
				final ArrayList list;
				
				final String bankid=sform.getBankid();
				final String reasondesc=sform.getReasondesc();
				final String active=sform.getActive();
				final String rejectionType=sform.getRejectionType();
				final BankAcctCB bCB = new BankAcctCB();
				final Map bankList = bCB.getBankList();
				request.setAttribute("BankList", bankList);
				final Map rejectionTypeList = sCB.getBankRejectionList();
				request.setAttribute("RejectionTypeList", rejectionTypeList);
				
				ActionErrors errors = new ActionErrors();
				errors = validation(bankid, "bname", errors);
				errors = validation(reasondesc, "reasondesc", errors);
				errors = validation(rejectionType, "rejectiontype", errors);
				errors = validation(active, "active", errors);
				
				
				if(errors.isEmpty())
				{
					sVB.setBankid(bankid);
					sVB.setReasondesc(reasondesc);
					sVB.setRejectionType(rejectionType);
					sVB.setActive(active);
					final int result=sCB.updateBankErrorDetails(sVB,errorid);
					LogManager.push("Update result->>>>>"+result);
					list=(ArrayList) sCB.getBankErrorDetails();
					request.setAttribute(LIST,list);
					LogManager.push("final result------------>"+result);
					request.setAttribute(SHOW,"DisplayBankError");
					
					
				}
				else
				{
					saveMessages(request, errors);
					saveErrors(request, errors);
					request.setAttribute(SHOW,"edit");
				}
				
				
				forward = mapping.findForward(PATH);
				LogManager.push("end updateBankError() method");
					 
	            return forward;
			}
			
			
	private ActionErrors validation(final String value, final String field,
			final ActionErrors errors) {
		try {
			LogManager.push("BankForm Controller validation method() - Enter");

			if (value == null || value.length() < 1
					|| value.equalsIgnoreCase("Select")) {
				errors.add(field, new ActionError("error.bankerror." +field+ ".required"));
			}

		} catch (Exception e) {
			LogManager.debug(e);

		} finally {
			LogManager
					.debug("BankForm Controller validation- Exit");
			LogManager.popRemove();
		}

		return errors;
	}
	
	
	
}