/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.maan.admin.usermanipulation;


import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.maan.common.LogManager;
import com.maan.common.base.AbstractCommonBaseDispatchAction;
import com.maan.common.exception.CommonBaseException;
import com.maan.common.exception.CommonExceptionConstants;
import com.maan.common.use.CommonCB;

/**
 * MyEclipse Struts Creation date: 09-11-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/loginCreation" name="loginmanipulationForm"
 *                input="/WEB-INF/jsp/admin/loginCreation.jsp"
 *                parameter="method" scope="request" validate="true"
 */
public class UserManipulationDispatchAction extends
		AbstractCommonBaseDispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	private final static String ADD="add";
	private final static String	LNFM="loginForm";
	private final static String	PTS="partToShow";
	private final static String	USRMP="userManipulation";
	private final static String	STATUS="status";
	private final static String	ACTION="action";
	
	public ActionForward newUser(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward;
		final UserManipulationForm manipulationForm = (UserManipulationForm) form;
		final CommonCB commonCB = new CommonCB();
		final UserManipulationCB creationCB = new UserManipulationCB();
		UserManipulationVB creationVB = new UserManipulationVB();
		try {
			LogManager.push("UserManipulation Controller newUser method() - Enter");
			final HttpSession session = request.getSession(false);
			manipulationForm.setMode(ADD);
			final int idval = commonCB.getMaxID("LOGIN_MASTER", "LOGIN_DETAIL_ID");
			manipulationForm.setId(idval);
			manipulationForm.setStatus("1");
			manipulationForm.setLoginID("");
			final com.maan.login.LoginForm loginform=(com.maan.login.LoginForm)session.getAttribute(LNFM);
			final Map uType=creationCB.getUserTypeList(loginform.getUserType());
			request.setAttribute("userTypeList", uType);
			/*final Map iCompany=creationCB.getInsuranceCompany(creationVB);
			request.setAttribute("insuranceCompName",iCompany);*/
			
			request.setAttribute(PTS, USRMP);
			forward = mapping.findForward(USRMP);
		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager
					.debug("UserManipulation Controller newUser method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}

	public ActionForward initUser(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward;
		final UserManipulationForm manipulationForm = (UserManipulationForm) form;
		final UserManipulationCB creationCB = new UserManipulationCB();
		try {
			LogManager
					.push("UserManipulation Controller initUser method() - Enter");

			final Map map = creationCB.getLoginIDMap();
			request.setAttribute("loginIDList", map);

			manipulationForm.setMode(ADD);
			request.setAttribute(PTS, "initUser");
			forward = mapping.findForward(USRMP);

		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager
					.debug("UserManipulation Controller initUser method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}

	public ActionForward edit(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward;
		final UserManipulationForm manipulationForm = (UserManipulationForm) form;
		final UserManipulationCB creationCB = new UserManipulationCB();
		UserManipulationVB creationVB = new UserManipulationVB();
		try {
			LogManager.push("Method Enter Into Edit");
			LogManager.push("UserManipulation Controller edit method() - Enter");
			final HttpSession session = request.getSession(false);
			manipulationForm.setMode("edit");
			final List list = creationCB.getLoginInfo(Integer.parseInt(manipulationForm.getLoginID()));
			creationVB = (UserManipulationVB) list.get(0);
			BeanUtils.copyProperties(manipulationForm, creationVB);

			saveToken(request);
			final com.maan.login.LoginForm loginform=(com.maan.login.LoginForm)session.getAttribute(LNFM);
			final Map uType=creationCB.getUserTypeList(loginform.getUserType());
			request.setAttribute("userTypeList", uType);
				
			/*final Map iCompany=creationCB.getInsuranceCompany(creationVB);
			request.setAttribute("insuranceCompName",iCompany);*/
			
			
					
			request.setAttribute(PTS, USRMP);

			forward = mapping.findForward(USRMP);

		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager
					.debug("UserManipulation Controller edit method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}

	public ActionForward resetPwd(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward;
		final UserManipulationForm manipulationForm = (UserManipulationForm) form;
		final UserManipulationCB creationCB = new UserManipulationCB();
		if (isTokenValid(request)) {

			try {
				LogManager
						.push("UserManipulation Controller resetPwd method() - Enter");

				ActionErrors errors = new ActionErrors();
               
				/*
				 * errors = validation(manipulationForm.getPassword(),
				 * "oldpassword", errors);
				 */
				errors = validation(manipulationForm.getPassword(), "password",
						errors);
				errors = validation(manipulationForm.getRePassword(),
						"repassword", errors);

				/*
				 * if (errors.isEmpty()) { if
				 * (creationCB.isOldPwdWright(manipulationForm.getLoginID(),
				 * manipulationForm.getOldPassword())) {
				 * errors.add("oldpwdNotMatch", new ActionError(
				 * "error.admin.logincreation.oldpwdNotMatch")); } }
				 */
				if (errors.isEmpty() &&  (!(manipulationForm.getPassword()
						.equals(manipulationForm.getRePassword())))) {
					
						errors.add("notmatch", new ActionError(
								"error.admin.logincreation.notmatch"));
					
				}
				LogManager.info(manipulationForm.getLoginID() + "\t"
						+ manipulationForm.getPassword()+"--"+manipulationForm.getLoginSts());
				if (errors.isEmpty()) {
					final HttpSession session = request.getSession(false);
					final com.maan.login.LoginForm loginform=(com.maan.login.LoginForm)session.getAttribute(LNFM);
					if (creationCB.changePwd(manipulationForm.getLoginID(),
							manipulationForm.getPassword(),loginform.getUserId(),manipulationForm.getLoginSts())) {
						request.setAttribute(STATUS, "Reseted Password");
					} else {
						request.setAttribute(STATUS, "Error Reset Password");
					}
					forward = mapping.findForward(STATUS);
					request.setAttribute(ACTION,
							"/userManipulation.do?method=initResetPwd");
					request.setAttribute("title", "Change Password");
					
					if(manipulationForm.getLoginSts().equalsIgnoreCase("yes"))
					{
						forward = mapping.findForward("userLogin");	
					}

				} else {
					saveMessages(request, errors);
					saveErrors(request, errors);
					request.setAttribute(PTS, "resetPassword");
					forward = mapping.findForward(USRMP);
				}
			} catch (Exception exception) {
				LogManager.debug(exception);
				throw new CommonBaseException(exception,
						CommonExceptionConstants.OTHER_ERROR);
			} finally {
				LogManager
						.debug("UserManipulation Controller resetPwd method() - Exit");
				LogManager.popRemove(); // Should be the last statement
			}
		} else {
			request.setAttribute(PTS, "initUser");
			forward = mapping.findForward(USRMP);
		}
		return forward;
	}

	public ActionForward initResetPwd(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward;
		try {
			LogManager
					.push("UserManipulation Controller initResetPwd method() - Enter");

			saveToken(request);
			
			final UserManipulationForm manipulationForm = (UserManipulationForm) form;
			manipulationForm.setLoginSts((String)request.getAttribute("loginSts")==null?request.getParameter("loginSts"):(String)request.getAttribute("loginSts"));
			request.setAttribute(PTS, "resetPassword");
			forward = mapping.findForward(USRMP);

		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager
					.debug("UserManipulation Controller initResetPwd method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}

	public ActionForward initMenuAllocate(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward;
		final UserManipulationForm manipulationForm = (UserManipulationForm) form;
		final UserManipulationCB manipulationCB = new UserManipulationCB();
		final CommonCB commonCB = new CommonCB();
		try {
			LogManager
					.push("UserManipulation Controller initMenuAllocate method() - Enter");

			if ("admin".equals(manipulationForm.getUserType())) {

				final UserManipulationVB manipulationVB = manipulationCB.getSelectedMenu(manipulationForm.getLoginID());

				final String menuIDs = manipulationVB.getMenuIDStr();
				manipulationForm.setStatus(manipulationVB.getStatus()); 
				final String[] menus = commonCB.stringToStringArray(menuIDs, ",");
				manipulationForm.setMenuIDs(menus);
				setRequestValue(request, response, manipulationForm,
						"selectedMenu");
				saveToken(request);
				request.setAttribute(PTS, "adminMenuAllocate");
			} else {
				final UserManipulationVB manipulationVB = manipulationCB.getSelectedMenu(manipulationForm.getLoginID());
					final String menuIDs = manipulationVB.getMenuIDStr();
					final String[] menus = commonCB.stringToStringArray(menuIDs, ",");
					manipulationForm.setMenuIDs(menus);
					manipulationForm.setStatus(manipulationVB.getStatus());
					setRequestValue(request, response, manipulationForm,
							"selectedMenu");
					saveToken(request);
				request.setAttribute(PTS, "menuAllocate");
			}
			forward = mapping.findForward(USRMP);
		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager
					.debug("UserManipulation Controller initMenuAllocate method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}
	public ActionForward initStateAllocate(final ActionMapping mapping,final ActionForm form,
			final HttpServletRequest request,final HttpServletResponse response)throws CommonBaseException{
		ActionForward forward =null;
		final UserManipulationForm manipulationForm=(UserManipulationForm)form;
		final  UserManipulationCB manipulationCB =new  UserManipulationCB();
		final CommonCB commonCB=new CommonCB();
		
		try {
				LogManager
						.push("UserManipulation Controller initStateAllocate method() - Enter");
						final UserManipulationVB manipulationVB = manipulationCB.getSelectedState(manipulationForm.getLoginID());
						final String stateIDs = manipulationVB.getStateCodes();
						final String[] state = commonCB.stringToStringArray(stateIDs, ",");
						manipulationForm.setStateCode(state);
						
						manipulationForm.setStatus(manipulationVB.getStatus());
						
			
						final List states = manipulationCB.getStateList();
					    
						request.setAttribute("stateList", states);
						
						request.setAttribute(PTS, "stateAllocate");
						saveToken(request);
						
				        forward = mapping.findForward(USRMP);
			} catch (Exception exception) {
				LogManager.debug(exception);
				throw new CommonBaseException(exception,
						CommonExceptionConstants.OTHER_ERROR);
			} finally {
				LogManager
						.debug("UserManipulation Controller initStateAllocate method() - Exit");
				LogManager.popRemove(); // Should be the last statement
			}
			return forward;
		}
	public ActionForward initDistrictAllocate(final ActionMapping mapping,final ActionForm form,
			final HttpServletRequest request,final HttpServletResponse response)throws CommonBaseException{
		ActionForward forward =null;
		final UserManipulationForm manipulationForm=(UserManipulationForm)form;
		final  UserManipulationCB manipulationCB =new  UserManipulationCB();
		final CommonCB commonCB=new CommonCB();
		
		try {
				LogManager
						.push("UserManipulation Controller initDistrictAllocate method() - Enter");
						final UserManipulationVB manipulationVB = manipulationCB.getSelectedDistrict(manipulationForm.getLoginID());
						final String districtIDs = manipulationVB.getDistrictCodes();
						final String[] district = commonCB.stringToStringArray(districtIDs, ",");
						manipulationForm.setDistrictCode(district);
											
						manipulationForm.setStatus(manipulationVB.getStatus());
						final List districts = manipulationCB.getDistrictList(manipulationVB);
					    
						request.setAttribute("districtList", districts);
						request.setAttribute(PTS, "districtAllocate");
						saveToken(request);
				        forward = mapping.findForward(USRMP);
			} catch (Exception exception) {
				LogManager.debug(exception);
				throw new CommonBaseException(exception,
						CommonExceptionConstants.OTHER_ERROR);
			} finally {
				LogManager
						.debug("UserManipulation Controller initDistrictAllocate method() - Exit");
				LogManager.popRemove(); // Should be the last statement
			}
			return forward;
		}



	public ActionForward menuAllocate(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward = null;
		final UserManipulationForm manipulationForm = (UserManipulationForm) form;
		final UserManipulationCB manipulationCB = new UserManipulationCB();
		final CommonCB commonCB = new CommonCB();
		final UserManipulationVB manipulationVB = new UserManipulationVB();

		if (isTokenValid(request)) {
			try {
				LogManager
						.push("UserManipulation Controller menuAllocate method() - Enter");

				final String menus = commonCB.stringArrayToString(manipulationForm
						.getMenuIDs(), ",");
				
				manipulationVB.setId(manipulationForm.getId());
				manipulationVB.setLoginID(manipulationForm.getLoginID());

				manipulationVB.setStatus(manipulationForm.getStatus());
				manipulationVB.setMenuIDStr("," + menus + ",");
				manipulationCB.allocateMenuToUser(manipulationVB);

				request.setAttribute("resultMsg", "Allocated Menu To User");

				resetToken(request);
				setRequestValue(request, response, manipulationForm,"");

				if ("admin".equals(manipulationForm.getUserType())) {
					request.setAttribute(ACTION, "/userManipulation.do?method=userList");
					request.setAttribute("title", "Login Creation");
					request.setAttribute(STATUS, "Allocated Menu To User");
					forward = mapping.findForward(STATUS);
				} else {
					request.setAttribute(PTS, "menuAllocate");
					forward = mapping.findForward(USRMP);
				}
			} catch (Exception exception) {
				LogManager.debug(exception);
				throw new CommonBaseException(exception,
						CommonExceptionConstants.OTHER_ERROR);
			} finally {
				LogManager
						.debug("UserManipulation Controller menuAllocate method() - Exit");
				LogManager.popRemove(); // Should be the last statement
			}
		} else {
			setRequestValue(request, response, manipulationForm,"");
			request.setAttribute(PTS, "menuAllocate");
			forward = mapping.findForward(USRMP);
		}

		return forward;
	}
		
	public ActionForward userList(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward;
		final UserManipulationForm manipulationForm = (UserManipulationForm) form;
		final UserManipulationCB creationCB = new UserManipulationCB();

		try {
			LogManager.push("UserManipulation Controller userList method() - Enter");

			ActionErrors errors = new ActionErrors();
			final HttpSession session = request.getSession(false);

			if ("list".equals(manipulationForm.getMode())) {
				errors = validation(manipulationForm.getSearchOn(), "searchon",
						errors);
			}
			
			final com.maan.login.LoginForm loginform=(com.maan.login.LoginForm)session.getAttribute(LNFM);
			final List list = creationCB.getUserList(manipulationForm.getSearchFor(),
					manipulationForm.getSearchOn(),loginform.getUserType());

			saveMessages(request, errors);
			saveErrors(request, errors);

			manipulationForm.setFromList("1");
			setRequestValue(request, response, manipulationForm, "searchOn");
			request.setAttribute("result", list);
			request.setAttribute(PTS, "userList");
			forward = mapping.findForward(USRMP);

		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager
					.debug("UserManipulation Controller userList method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}

	public ActionForward save(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward;
		LogManager.push("UserManipulation Controller save method() - Enter");
		final UserManipulationForm manipulationForm = (UserManipulationForm) form;
		final UserManipulationCB creationCB = new UserManipulationCB();
		final UserManipulationVB creationVB = new UserManipulationVB();
		final CommonCB commonCB = new CommonCB();
		
		LogManager.push("UserManipulation Controller save1 method() - Enter");
		
			try {
				LogManager.push("UserManipulation Controller save2 method() - Enter");
				final HttpSession session = request.getSession(false);
				ActionErrors errors = new ActionErrors();
				creationVB.setUserName( manipulationForm.getUserName() );
				creationVB.setStatus( manipulationForm.getStatus()  );
				creationVB.setLoginID( manipulationForm.getLoginID() );
				creationVB.setUserType( manipulationForm.getUserType());
				
				if (ADD.equals(manipulationForm.getMode())) {
					errors = validation(manipulationForm.getLoginID(),"loginID", errors);
					if (errors.isEmpty() && !creationCB.isLoginOccur(manipulationForm.getLoginID())) {
						errors.add("loginIDNot", new ActionError("error.admin.logincreation.loginIDNot"));
					}
					errors = validation(manipulationForm.getPassword(),"password", errors);
					errors = validation(manipulationForm.getRePassword(),"repassword", errors);
					if (errors.isEmpty() && !(manipulationForm.getPassword().equals(manipulationForm.getRePassword()))) {
							errors.add("notmatch", new ActionError("error.admin.logincreation.notmatch"));
					}
				}
				errors = validation(manipulationForm.getUserName(), "name",errors);
				if (manipulationForm.getUserType().equals("-1")) {
					errors.add("type", new ActionError("error.admin.logincreation.type"));
				}

				if (errors.isEmpty()) {
					BeanUtils.copyProperties(creationVB, manipulationForm);
					if (manipulationForm.getMode().equals(ADD)) {
						if( manipulationForm.getUserType().equalsIgnoreCase("approver1") || manipulationForm.getUserType().equalsIgnoreCase("approver2")) {
							if(creationCB.insertApproverUser(creationVB)) {
								request.setAttribute(STATUS , "Approver user created successfully");
								resetToken( request );
							} else {
								errors.add("ApproverUserCreation", new ActionError("error.admin.logincreation.approverUser"));
							}
						} 
						if (creationCB.insertUser(creationVB)) {
							request.setAttribute(STATUS,"User Created Sucessfully");
						    resetToken(request);									
						} else { 
							request.setAttribute(STATUS,"Error In User Creation");
						}
						forward = mapping.findForward(STATUS);					
					} else {
						if (creationCB.updateUser(creationVB)) {
							LogManager.push("Value of USERTYPE------>>>"+creationVB.getUserType());
							if(creationVB.getUserType().equalsIgnoreCase("investigateUser"))
							{
								LogManager.push("<<<--------Value ------>>>");
								forward = mapping.findForward("/invest.do?method=newInvest");
							}
							else
							{
							request.setAttribute(STATUS,"User Updated Sucessfully");
							resetToken(request);
							forward = mapping.findForward(STATUS);
							}
						} else {
							request.setAttribute(STATUS,"Error In User Updation");
							forward = mapping.findForward(STATUS);
						}
						
					}
					if ("1".equals(manipulationForm.getFromList())) {
						request.setAttribute(ACTION,"/userManipulation.do?method=userList");
					} else {
						request.setAttribute(ACTION,"/userManipulation.do?method=initUser");
					}

					request.setAttribute("title", "Login Creation");
					request.setAttribute(PTS, USRMP);

				} else {
					saveMessages(request, errors);
					saveErrors(request, errors);
					final com.maan.login.LoginForm loginform=(com.maan.login.LoginForm)session.getAttribute(LNFM);
					final Map uType=creationCB.getUserTypeList(loginform.getUserType());
					request.setAttribute("userTypeList", uType);
					/*final Map iCompany=creationCB.getInsuranceCompany(creationVB);
					request.setAttribute("insuranceCompName",iCompany);*/
					request.setAttribute(PTS, USRMP);
					forward = mapping.findForward(USRMP);
				}
			} catch (Exception exception) {
				LogManager.debug(exception);
				throw new CommonBaseException(exception,
						CommonExceptionConstants.OTHER_ERROR);
			} finally {
				LogManager
						.debug("UserManipulation Controller save method() - Exit");
				LogManager.popRemove(); // Should be the last statement
			}
		
		return forward;
	}

	public void setRequestValue(final HttpServletRequest request,
			final HttpServletResponse response,
			final UserManipulationForm manipulationForm, final String value)
			throws CommonBaseException {

		try {
			LogManager.push("setRequestValue method() - Enter");

			if ("searchOn".equals(value)) {
				final Map map = new TreeMap();
				map.put("0", "All");
				map.put("LOGIN_ID", "Login ID");
				map.put("USERNAME", "User Name");
				request.setAttribute("searchForList", map);
			}else{
				final UserManipulationCB manipulationCB = new UserManipulationCB();
				final List menu = manipulationCB.getMenuList(manipulationForm
						.getUserType());
				request.setAttribute("menuList", menu);
			}
			
		} catch (Exception e) {
			LogManager.debug(e);
			throw new CommonBaseException(e, CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("setRequestValue method() - Exit");
			LogManager.popRemove();
		}
	}
	public void setRequest(final HttpServletRequest request,
			final HttpServletResponse response,
			final UserManipulationForm manipulationForm, final String value)
			throws CommonBaseException {

		try {
			LogManager.push("setRequest method() - Enter");

			if ("searchOn".equals(value)) {
				final Map map = new TreeMap();
				map.put("0", "All");
				map.put("LOGIN_ID", "Login ID");
				map.put("USERNAME", "User Name");
				request.setAttribute("searchForList", map);
			}else{
				final UserManipulationCB manipulationCB = new UserManipulationCB();
				final List state = manipulationCB.getMenuList(manipulationForm
						.getUserType());
				request.setAttribute("stateList", state);
			}
			
		} catch (Exception e) {
			LogManager.debug(e);
			throw new CommonBaseException(e, CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("setRequest method() - Exit");
			LogManager.popRemove();
		}
	}

	private ActionErrors validation(final String value, final String field,
			final ActionErrors errors) {
		if (value == null || value.length() < 1) {
			errors.add(field, new ActionError("error.admin.logincreation."
					+ field));
		}
		return errors;
	}// 7698A1
	// 2065A1
}