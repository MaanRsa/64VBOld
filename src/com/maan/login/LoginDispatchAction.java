/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.maan.login;

import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.maan.admin.usermanipulation.UserManipulationCB;
import com.maan.common.LogManager;
import com.maan.common.base.AbstractCommonBaseDispatchAction;
import com.maan.common.exception.CommonBaseException;
import com.maan.common.exception.CommonExceptionConstants;

/**
 * MyEclipse Struts Creation date: 10-24-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/login" name="loginForm" input="/form/login.jsp"
 *                scope="request" validate="true"
 */

public class LoginDispatchAction extends AbstractCommonBaseDispatchAction {
	/*
	 * Generated Methods
	 */
	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	private final static String USER="user";
	public ActionForward init(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		return mapping.findForward(USER);
	}

	public ActionForward login(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {

		final LoginForm loginForm = (LoginForm) form;
		final ActionErrors errors = new ActionErrors();
		final LoginVB loginVB = new LoginVB();
		final LoginCB loginCB = new LoginCB();
		ActionForward forward = null;
		List list;
		final HttpSession session = request.getSession(true);

		try {
			LogManager.push("Login Controller method() - Enter");
			if (loginForm.getEnteredLoginID() == null
					|| loginForm.getEnteredLoginID().length() == 0) {
				errors.add(USER, new ActionError("error.username.required"));
			}
			if (loginForm.getEnteredPassword() == null
					|| loginForm.getEnteredPassword().length() == 0) {
				errors.add("pass", new ActionError("error.password.required"));
			}
			if (errors.isEmpty()) {
				forward = mapping.findForward("userLogin");
				loginVB.setEnteredLoginId(loginForm.getEnteredLoginID());
				loginVB.setEnteredPassword(loginForm.getEnteredPassword());
				list = loginCB.makeAuthendication(loginVB);

				if (list.isEmpty()) {
					errors.add("in", new ActionError("error.userpwd.required"));
				}
				if (errors.isEmpty()) {
					final boolean status = loginCB.insertSessionInfo(loginVB, session.getId());
					//if (status) {
						final LoginVB loginVB2 = (LoginVB) list.get(0);
						loginForm.setUserId(loginVB2.getUserId());
						loginForm.setUserType(loginVB2.getUserType());
						loginForm.setLoginId(loginVB2.getLoginId());
						loginForm.setInsCompanyId(loginVB2.getInsCompanyId());						
						loginForm.setStartDate(loginVB2.getStartDate());
						loginForm.setEndDate(loginVB2.getEndDate());
						loginVB.setLoginId(loginVB2.getLoginId());
						final UserManipulationCB manipulationCB = new UserManipulationCB();
						if(!"admin".equalsIgnoreCase(loginVB2.getUserType())){
							final String passdate=manipulationCB.getLoginPassDate(loginVB2.getUserId());
							LogManager.push("going to Login User"+passdate);
							if(passdate==null || passdate.length()<=0){
								forward = mapping.findForward("status");
								request.setAttribute("action","/userManipulation.do?method=initResetPwd");
							    request.setAttribute("title", "Change Password");
							    request.setAttribute("loginSts", "yes");
							}else if (USER.equals(loginVB2.getUserType())) {
									loginForm.setEnteredPassword("");
									session.setAttribute("loginForm", loginForm);
									forward = mapping.findForward("userLogin");
							}else if("uploaduser".equalsIgnoreCase(loginVB2.getUserType())){
								loginForm.setEnteredPassword("");
								session.setAttribute("loginForm", loginForm);
								forward = mapping.findForward("uploadLogin");
							}else if("investigateuser".equalsIgnoreCase(loginVB2.getUserType())){
								loginForm.setEnteredPassword("");
								loginForm.setInvestigationOfficerCode(loginCB.getInvestigationUserCode(loginForm));
								session.setAttribute("loginForm", loginForm);
								forward = mapping.findForward("investigateLogin");
							}
						}else {
							loginForm.setEnteredPassword("");
							session.setAttribute("loginForm", loginForm);
							forward = mapping.findForward("adminWelcome");
						}						
					/*} 
					else {
						LogManager.push("error.loginexist.required");
						errors.add("in", new ActionError(
								"error.loginexist.required"));
						saveMessages(request, errors);
						forward = mapping.findForward(USER);
					}*/
				} else {
					saveMessages(request, errors);
					forward = mapping.findForward(USER);
					loginForm.setEnteredPassword("");
				}
			} else {
				saveMessages(request, errors);
				forward = mapping.findForward(USER);
			}

		} catch (Exception exception) {
			exception.printStackTrace();
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("Login Controller method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}

	public ActionForward clear(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		try {
			LogManager.info("Inside clear functon");
		} catch (Exception exception) {
			throw new CommonBaseException(exception, exception.getMessage());
		}
		return mapping.findForward("load");
	}

	public ActionForward cancel(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		try {
			LogManager.info("Inside cancel functon");
		} catch (Exception exception) {
			throw new CommonBaseException(exception, exception.getMessage());
		}
		return mapping.findForward(USER);
	}

	public ActionForward changeSkin(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {

		try {
			LogManager.info("Inside clear changeSkin");
			final String skin[] = { "blue", "green", "orange", "red", "hash" };

			final HttpSession session = request.getSession(false);
			final LoginForm loginForm = (LoginForm) session.getAttribute("loginForm");

			int idVal = loginForm.getskinId() + 1;

			if (idVal == skin.length) {
				idVal = 0;
			}
			loginForm.setSkin(skin[idVal]);
			loginForm.setskinId(idVal);

		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("Login Controller method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return mapping.findForward(USER);
	}

	public ActionForward logout(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {

		ActionForward forward;
		final HttpSession session = request.getSession(false);
		final LoginForm loginForm = (LoginForm) session.getAttribute("loginForm");
		LogManager.push(loginForm.getUserId());
		final LoginVB loginVB = new LoginVB();
		final LoginCB loginCB = new LoginCB();
		try {

			LogManager.push("Logout Controller method() - Enter");
			LogManager.push("Logout Controller  method() enter");
			BeanUtils.copyProperties(loginVB, loginForm);
			//loginVB.setUserId(loginForm.getUserId());
			loginCB.updateSessionInfo(loginVB, session.getId());
			session.invalidate();
			
			forward = mapping.findForward(USER);

		} catch (Exception e) {
			LogManager.debug(e);
			throw new CommonBaseException(e, CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("Logout Controller method() - Exit");
			LogManager.popRemove();
		}
		return forward;
	}

	public ActionForward setDates(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {

		ActionForward forward;
		final HttpSession session = request.getSession(false);
		final ActionErrors errors = new ActionErrors();
		final LoginForm loginForm = (LoginForm) session.getAttribute("loginForm");
		final SimpleDateFormat date = new SimpleDateFormat("dd-MM-yyyy",Locale.getDefault());
		date.setLenient(false);
		try {
			LogManager.push("setDates Controller method() - Enter");
			final String startDate = request.getParameter("startDate");
			final String endDate = request.getParameter("endDate");
			Date staDate = null;
			Date edDate = null;
			try{
				staDate = date.parse(startDate,new ParsePosition(0));
				if(staDate == null){
					errors.add("login", new ActionError("error.login.startdate.invalid"));
				}
			}catch(Exception ex){
				errors.add("login", new ActionError("error.login.startdate.invalid"));				
			}
			try{
				edDate  = date.parse(endDate,new ParsePosition(0));
				if(edDate == null){
					errors.add("login", new ActionError("error.login.enddate.invalid"));
				}
			}catch(Exception ex){
				errors.add("login", new ActionError("error.login.enddate.invalid"));				
			}
			if(staDate != null && edDate != null && staDate.after(edDate)){
				errors.add("login", new ActionError("error.login.date.invalid"));
			}
			if(errors.isEmpty()){
				loginForm.setStartDate(startDate);
				loginForm.setEndDate(endDate);
			}else{
				saveMessages(request, errors);
				saveErrors(request, errors);
			}
			forward = mapping.findForward("date");
		} catch (Exception e) {
			LogManager.debug(e);
			throw new CommonBaseException(e, CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("setDates Controller method() - Exit");
			LogManager.popRemove();
		}
		return forward;
	}
}