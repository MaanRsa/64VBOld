/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.maan.menu;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.maan.common.LogManager;
import com.maan.common.base.AbstractCommonBaseDispatchAction;
import com.maan.common.exception.CommonBaseException;
import com.maan.common.exception.CommonExceptionConstants;
import com.maan.login.LoginForm;

/**
 * MyEclipse Struts Creation date: 09-08-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/menu" name="menuForm"
 *                input="/WEB-INF/jsp/welcomePage.jsp" parameter="method"
 *                scope="request" validate="true"
 */
public class MenuDispathAction extends AbstractCommonBaseDispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward menu(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		final MenuCB menuCB = new MenuCB();
		List menu;
		final HttpSession session = request.getSession(false);
		try {
			LogManager.push("Menu Controller menu method() - Enter");

			final LoginForm loginForm = (LoginForm) session.getAttribute("loginForm");
			loginForm.setUserType(request.getParameter("userType")==null?loginForm.getUserType():request.getParameter("userType"));
			menu = menuCB.getMenu(loginForm.getUserId(), loginForm.getUserType());
			session.setAttribute("menu", menu);
			session.setAttribute("userType",loginForm.getUserType());

		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception,
					CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("Login Controller method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return mapping.findForward("first");
	}

	public ActionForward adminMenu(final ActionMapping mapping,
			final ActionForm form, final HttpServletRequest request,
			final HttpServletResponse response) throws CommonBaseException {
		final MenuCB menuCB = new MenuCB();
		List menu;
		final HttpSession session = request.getSession(false);
		try {
			LogManager.push("Menu Controller menu method() - Enter");

			final LoginForm loginForm = (LoginForm) session.getAttribute("loginForm");			
			menu = menuCB.getAdminMenu(loginForm.getUserId());
			session.setAttribute("menu", menu);

		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception, CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("Login Controller method() - Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return mapping.findForward("adminMenu");
	}
	
	public ActionForward ShowDistricts(final ActionMapping mapping,final ActionForm form, final HttpServletRequest request,final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward = null;
		final MenuCB menuCB = new MenuCB();
		final HttpSession session = request.getSession(false);
		final LoginForm loginForm = (LoginForm) session.getAttribute("loginForm");			
		try {
			LogManager.info("ShowDistricts Controller Enter");
			session.removeAttribute("menu");
			HashMap state =  menuCB.getStateListCB1(loginForm.getUserId());
			HashMap districtList = new LinkedHashMap();
			forward = mapping.findForward("statedistrict");
			if(state!=null && state.size()==1){
				Set key = state.keySet();
				Object[] keys = key.toArray();
				if(keys.length == 1){
					districtList = menuCB.getDistrictListCB1(keys[0].toString(), loginForm.getUserId());
					if(districtList!=null && districtList.size()==1){
						Set key1 = districtList.keySet();
						Object[] keys1 = key1.toArray();
						if(keys.length == 1){
							loginForm.setStateCode(keys[0].toString());
							loginForm.setDistrictCode(keys1[0].toString());
							loginForm.setStateName(menuCB.getStateNameCB(keys[0].toString()));
							loginForm.setDistrictName(menuCB.getDistrictNameCB(keys1[0].toString(),keys[0].toString()));
							if("investigateuser".equalsIgnoreCase(loginForm.getUserType())){
								forward = mapping.findForward("investuser");
							}else{
								List menu = menuCB.getMenu(loginForm.getUserId(), loginForm.getUserType());
								session.setAttribute("menu", menu);
								session.setAttribute("userType",loginForm.getUserType());
								request.setAttribute("PartToShow","home" );
								forward = mapping.findForward("user");
							}
						}
					}else{
						districtList = new LinkedHashMap();
					}
				}
			}
			request.setAttribute("StateMap", state);
			request.setAttribute("DistrictMap", districtList);
		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception, CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("ShowDistricts Controller Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}
	
	public ActionForward DistrictListLogin(final ActionMapping mapping,final ActionForm form, final HttpServletRequest request,final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward = null;
		final MenuCB menuCB = new MenuCB();
		String reqfrom=request.getParameter("reqfrom")==null?"":(String)request.getParameter("reqfrom");
		final HttpSession session = request.getSession(false);
		final LoginForm loginForm = (LoginForm) session.getAttribute("loginForm");			
		try {
			MenuForm formObj = (MenuForm)form;
			HashMap districtList =  menuCB.getDistrictListCB1(formObj.getStateId(),loginForm.getUserId());
			if("upload".equalsIgnoreCase(reqfrom))
			request.setAttribute("strutsShow", "Yes");
			
			request.setAttribute("DistrictMap", districtList);
			forward = mapping.findForward("districtshow");
		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception, CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("DistrictListLogin Controller Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}
	
	public ActionForward DistrictList(final ActionMapping mapping,final ActionForm form, final HttpServletRequest request,final HttpServletResponse response) throws CommonBaseException {
		ActionForward forward = null;
		final MenuCB menuCB = new MenuCB();
		String reqfrom=request.getParameter("reqfrom")==null?"":(String)request.getParameter("reqfrom");
		LogManager.push("reqfrom: "+reqfrom);
		try {
			MenuForm formObj = (MenuForm)form;
			HashMap districtList =  menuCB.getDistrictListCB(formObj.getStateId());
			if("upload".equalsIgnoreCase(reqfrom))
			request.setAttribute("strutsShow", "Yes");
			
			request.setAttribute("DistrictMap", districtList);
			forward = mapping.findForward("districtshow");
		} catch (Exception exception) {
			LogManager.debug(exception);
			throw new CommonBaseException(exception, CommonExceptionConstants.OTHER_ERROR);
		} finally {
			LogManager.debug("ShowDistricts Controller Exit");
			LogManager.popRemove(); // Should be the last statement
		}
		return forward;
	}
	
	
}